[{"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\index.tsx":"1","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\App.tsx":"3","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ConfigPage.tsx":"4","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\common\\layout.tsx":"5","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\BrewPage.tsx":"6","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\common\\NavBar.tsx":"7","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\BrewerySwitchBar.tsx":"8","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\common\\Spinner.tsx":"9","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\BreweryPanels.tsx":"10","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\models\\controller.model.ts":"11","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\BrewPanel.tsx":"12","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\HeatControl.tsx":"13","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\TempDisplay.tsx":"14","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\context\\websocketContext.tsx":"15","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ControllersPanel.tsx":"16","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ControllerModal.tsx":"17","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ControllerCard.tsx":"18","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ControllerField.tsx":"19"},{"size":517,"mtime":1639788129000,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1639788129000,"results":"22","hashOfConfig":"21"},{"size":789,"mtime":1647715897352,"results":"23","hashOfConfig":"21"},{"size":3844,"mtime":1647715884357,"results":"24","hashOfConfig":"21"},{"size":217,"mtime":1639788129000,"results":"25","hashOfConfig":"21"},{"size":1634,"mtime":1657328981467,"results":"26","hashOfConfig":"21"},{"size":211,"mtime":1639788129000,"results":"27","hashOfConfig":"21"},{"size":748,"mtime":1639788129199,"results":"28","hashOfConfig":"21"},{"size":164,"mtime":1639788129000,"results":"29","hashOfConfig":"21"},{"size":620,"mtime":1641138519000,"results":"30","hashOfConfig":"21"},{"size":649,"mtime":1639788129199,"results":"31","hashOfConfig":"21"},{"size":2702,"mtime":1647716110848,"results":"32","hashOfConfig":"21"},{"size":2054,"mtime":1641140661000,"results":"33","hashOfConfig":"21"},{"size":296,"mtime":1640455217000,"results":"34","hashOfConfig":"21"},{"size":1411,"mtime":1641274699000,"results":"35","hashOfConfig":"21"},{"size":855,"mtime":1641077914000,"results":"36","hashOfConfig":"21"},{"size":4998,"mtime":1647716101033,"results":"37","hashOfConfig":"21"},{"size":1376,"mtime":1641046870000,"results":"38","hashOfConfig":"21"},{"size":476,"mtime":1640968139000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1pp63sn",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\index.tsx",[],["83","84"],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\App.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ConfigPage.tsx",["85"],"// import { stat } from \"fs\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { BrewController } from \"../../../../server/lib/models/controllerModels\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\n// import Spinner from \"../common/Spinner\";\r\nimport Spinner from \"../common/Spinner\";\r\nimport { ControllerModal } from \"./ControllerModal\";\r\nimport { ControllerPanel } from \"./ControllersPanel\";\r\n\r\nconst testInitialControllers: BrewController[] = [\r\n  {\r\n    id: \"test\",\r\n    name: \"name\",\r\n    description: \"This is a test controller\",\r\n    sensorAddress: \"12345\",\r\n    heaterPin: 3,\r\n  },\r\n];\r\n\r\nexport const ConfigPage = function () {\r\n  const [brewControllers, setBrewControllers] = useState<BrewController[]>(\r\n    testInitialControllers\r\n  );\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [selectedController, setSelectedController] = useState<\r\n    BrewController | undefined\r\n  >(undefined);\r\n  const [isNew, setIsNew] = useState<boolean>(true);\r\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n  const { socket, status } = useContext(WebSocketContext);\r\n\r\n  useEffect(() => {\r\n    getControllers();\r\n  }, [socket, status]);\r\n\r\n  function getControllers() {\r\n    if (socket !== undefined && status === \"Connected\") {\r\n      socket.emit(\"controller:list\", (res) => {\r\n        if (\"error\" in res) {\r\n          console.log(res.error);\r\n        } else {\r\n          setBrewControllers(res.data);\r\n          setIsLoaded(true);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function deleteController(controller: BrewController) {\r\n    if (\r\n      window.confirm(\r\n        `Are you sure you would like to delete controller ${controller.name}`\r\n      )\r\n    ) {\r\n      if (socket !== undefined) {\r\n        socket.emit(\"controller:delete\", controller.id, (res) => {\r\n          console.log(res);\r\n          getControllers();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  function addOrUpdateController(\r\n    controller: BrewController | Omit<BrewController, \"id\">,\r\n    isNew: boolean\r\n  ) {\r\n    if (socket !== undefined) {\r\n      if (isNew) {\r\n        const addController = controller as Omit<BrewController, \"id\">;\r\n        socket.emit(\"controller:add\", addController, (res) => {\r\n          console.log(res);\r\n        });\r\n      } else {\r\n        const updateController = controller as BrewController;\r\n        socket.emit(\"controller:update\", updateController, (res) => {\r\n          console.log(res);\r\n        });\r\n      }\r\n      console.log(\"addOrUpdateController\");\r\n    }\r\n  }\r\n\r\n  function editController(controller: BrewController) {\r\n    console.log(\"updateController\");\r\n    setSelectedController(controller);\r\n    setIsNew(false);\r\n    setIsModalOpen(true);\r\n  }\r\n\r\n  function newController() {\r\n    console.log(\"newController\");\r\n    setSelectedController(undefined);\r\n    setIsNew(true);\r\n    setIsModalOpen(true);\r\n  }\r\n\r\n  function closeModal() {\r\n    setIsModalOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-center\">Brewery Configuration!</h1>\r\n      <div className=\"d-flex justify-content-center\">\r\n        {isLoaded && brewControllers !== undefined ? (\r\n          <ControllerPanel\r\n            controllers={brewControllers}\r\n            deleteController={deleteController}\r\n            editController={editController}\r\n          />\r\n        ) : (\r\n          <div>\r\n            <Spinner />\r\n            <h2>Loading ...</h2>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <Button variant=\"primary\" onClick={newController}>\r\n        Add New Controller\r\n      </Button>\r\n      <ControllerModal\r\n        controller={selectedController}\r\n        show={isModalOpen}\r\n        onSubmit={addOrUpdateController}\r\n        closeModal={closeModal}\r\n        isNew={isNew}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\common\\layout.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\BrewPage.tsx",["86"],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\common\\NavBar.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\BrewerySwitchBar.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\common\\Spinner.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\BreweryPanels.tsx",["87","88","89"],"import { Socket } from \"socket.io-client\";\r\nimport {\r\n  ClientToServerEvents,\r\n  ServerToClientEvents,\r\n} from \"../../../../server/lib/events\";\r\nimport { BrewController } from \"../../../../server/lib/models/controllerModels\";\r\nimport { BrewPanel } from \"./BrewPanel\";\r\n\r\ninterface BreweryPanelProps {\r\n  brewControllers: BrewController[];\r\n}\r\n\r\nexport function BreweryPanels(props: BreweryPanelProps) {\r\n  const { brewControllers } = props;\r\n\r\n  return (\r\n    <div>\r\n      {brewControllers.map((controller) => {\r\n        return <BrewPanel key={controller.id} controller={controller} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\models\\controller.model.ts",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\BrewPanel.tsx",["90","91"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  BrewController,\r\n  ControllerTemperature,\r\n  PowerLevelAdjustmentData,\r\n} from \"../../../../server/lib/models/controllerModels\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\nimport { PowerLevelComponent } from \"./HeatControl\";\r\nimport { TemperatureDisplay } from \"./TempDisplay\";\r\n\r\ninterface Props {\r\n  controller: BrewController;\r\n}\r\n\r\nexport function BrewPanel(props: Props) {\r\n  const { controller } = props;\r\n  const units = \"F\";\r\n  const { socket, status } = useContext(WebSocketContext);\r\n  const [powerLevel, setPowerLevel] = useState<number>(0);\r\n  const [temp, setTemp] = useState<ControllerTemperature>(\"--\");\r\n\r\n  useEffect(() => {\r\n    subscribeToSocket();\r\n    return function cleanup() {\r\n      if (socket !== undefined) {\r\n        socket.removeAllListeners(\"brew:update\");\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    subscribeToSocket();\r\n  }, [socket]);\r\n\r\n  const subscribeToSocket = () => {\r\n    console.log(\"Trying to subscribe to websocket events ... \");\r\n    if (socket !== undefined && status === \"Connected\") {\r\n      socket.on(\"brew:update\", (updatedStates) => {\r\n        try {\r\n          updatedStates.forEach((controllerDto) => {\r\n            if (controller.id === controllerDto.id) {\r\n              setTemp(controllerDto.temperature);\r\n              setPowerLevel(controllerDto.powerLevel);\r\n              return;\r\n            }\r\n          });\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const adjustPowerLevel = (adjustment: number) => {\r\n    const powerAdjustmentDto: PowerLevelAdjustmentData = {\r\n      id: controller.id,\r\n      powerLevel,\r\n    };\r\n    powerAdjustmentDto.powerLevel += adjustment;\r\n    if (powerAdjustmentDto.powerLevel > 100)\r\n      powerAdjustmentDto.powerLevel = 100;\r\n    else if (powerAdjustmentDto.powerLevel < 0)\r\n      powerAdjustmentDto.powerLevel = 0;\r\n    if (socket !== undefined) {\r\n      socket.emit(\"brew:adjust\", powerAdjustmentDto, (res) => {\r\n        if (res !== undefined) {\r\n          if (\"error\" in res) {\r\n            console.log(res.error);\r\n            return;\r\n          }\r\n          const newPower = res.data;\r\n          console.log(`Power level set to ${newPower.powerLevel}`);\r\n          setPowerLevel(res.data.powerLevel);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-inline-flex flex-column p-2 border \">\r\n      <h1>{controller.name}</h1>\r\n      <TemperatureDisplay temperature={temp} units={units} />\r\n      <PowerLevelComponent\r\n        powerLevel={powerLevel}\r\n        adjustPowerLevel={adjustPowerLevel}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\HeatControl.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\brew\\TempDisplay.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\context\\websocketContext.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ControllersPanel.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ControllerModal.tsx",["92","93"],"import { useContext, useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport { BrewController } from \"../../../../server/lib/models/controllerModels\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\n\r\ninterface Props {\r\n  controller: BrewController | undefined;\r\n  show: boolean;\r\n  isNew: boolean;\r\n  onSubmit: (\r\n    controller: BrewController | Omit<BrewController, \"id\">,\r\n    isNew: boolean\r\n  ) => void;\r\n  closeModal: () => void;\r\n}\r\n\r\nconst initialController: BrewController = {\r\n  id: \"noid\",\r\n  name: \"New controller\",\r\n  sensorAddress: \"NA\",\r\n  heaterPin: -1,\r\n  description: \"\",\r\n};\r\n\r\nexport function ControllerModal({\r\n  controller,\r\n  show,\r\n  isNew,\r\n  onSubmit,\r\n  closeModal,\r\n}: Props) {\r\n  const { socket, status } = useContext(WebSocketContext);\r\n  const [saveController, setSaveController] =\r\n    useState<BrewController>(initialController);\r\n  const [sensorAddresses, setSensorAddresses] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (isNew) {\r\n      setSaveController(initialController);\r\n    } else {\r\n      if (controller === undefined) {\r\n        throw Error(\"Controller is not defined\");\r\n      }\r\n      // set sensor address\r\n      const controllerToSet = { ...controller };\r\n      if (!sensorAddresses.includes(controllerToSet.sensorAddress)) {\r\n        controllerToSet.sensorAddress = \"\";\r\n      }\r\n\r\n      setSaveController(controller);\r\n    }\r\n  }, [controller]);\r\n\r\n  useEffect(() => {\r\n    getSensors();\r\n  }, [socket, status]);\r\n\r\n  function getSensors() {\r\n    if (socket !== undefined && status === \"Connected\") {\r\n      console.log(\"trying to get sensors\");\r\n      socket.emit(\"sensor:getAll\", (res) => {\r\n        if (\"error\" in res) {\r\n          console.log(res.error);\r\n        } else {\r\n          console.log(\"sensor list returned: \" + res.data);\r\n          setSensorAddresses(res.data);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function sensorAddressOptions() {\r\n    console.log(\r\n      \"populating sensor addresses, count of \" + sensorAddresses.length\r\n    );\r\n    const nonEmptyElements = sensorAddresses.map((address) => (\r\n      <option key={address} value={address}>\r\n        {address}\r\n      </option>\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        <option value=\"\"></option>\r\n        {nonEmptyElements}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-center\">\r\n      <Modal show={show} onHide={closeModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {isNew ? \"Add Controller\" : \"Edit Controller\"}\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <form\r\n            id=\"add-edit-controller-form\"\r\n            onSubmit={() => onSubmit(saveController, isNew)}\r\n          >\r\n            <div className=\"mb-3\">\r\n              <label className=\"form-label\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                value={saveController.name}\r\n                onChange={(e) =>\r\n                  setSaveController({\r\n                    ...saveController,\r\n                    name: e.target.value,\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"form-label\">Description</label>\r\n              <input\r\n                type=\"text\"\r\n                value={saveController.description}\r\n                onChange={(e) =>\r\n                  setSaveController({\r\n                    ...saveController,\r\n                    description: e.target.value,\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"form-label\">Sensor Address</label>\r\n              <select\r\n                value={saveController.sensorAddress}\r\n                onChange={(e) =>\r\n                  setSaveController({\r\n                    ...saveController,\r\n                    sensorAddress: e.target.value,\r\n                  })\r\n                }\r\n              >\r\n                {sensorAddressOptions()}\r\n              </select>\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label className=\"form-label\">Heater Pin</label>\r\n              <input\r\n                type=\"text\"\r\n                value={saveController.heaterPin}\r\n                onChange={(e) =>\r\n                  setSaveController({\r\n                    ...saveController,\r\n                    heaterPin: -1,\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n          </form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={closeModal}>\r\n            Close\r\n          </Button>\r\n          <button\r\n            type=\"submit\"\r\n            form=\"add-edit-controller-form\"\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Save changes\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ControllerCard.tsx",[],"C:\\Users\\cblis\\OneDrive\\Documents\\Projects\\SBFE4\\client\\src\\components\\configure\\ControllerField.tsx",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":35,"column":6,"nodeType":"100","endLine":35,"endColumn":22,"suggestions":"101"},{"ruleId":"98","severity":1,"message":"99","line":17,"column":6,"nodeType":"100","endLine":17,"endColumn":14,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":10,"nodeType":"105","messageId":"106","endLine":1,"endColumn":16},{"ruleId":"103","severity":1,"message":"107","line":3,"column":3,"nodeType":"105","messageId":"106","endLine":3,"endColumn":23},{"ruleId":"103","severity":1,"message":"108","line":4,"column":3,"nodeType":"105","messageId":"106","endLine":4,"endColumn":23},{"ruleId":"98","severity":1,"message":"109","line":29,"column":6,"nodeType":"100","endLine":29,"endColumn":8,"suggestions":"110"},{"ruleId":"98","severity":1,"message":"111","line":33,"column":6,"nodeType":"100","endLine":33,"endColumn":14,"suggestions":"112"},{"ruleId":"98","severity":1,"message":"113","line":52,"column":6,"nodeType":"100","endLine":52,"endColumn":18,"suggestions":"114"},{"ruleId":"98","severity":1,"message":"115","line":56,"column":6,"nodeType":"100","endLine":56,"endColumn":22,"suggestions":"116"},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getControllers'. Either include it or remove the dependency array.","ArrayExpression",["119"],["120"],"@typescript-eslint/no-unused-vars","'Socket' is defined but never used.","Identifier","unusedVar","'ClientToServerEvents' is defined but never used.","'ServerToClientEvents' is defined but never used.","React Hook useEffect has missing dependencies: 'socket' and 'subscribeToSocket'. Either include them or remove the dependency array.",["121"],"React Hook useEffect has a missing dependency: 'subscribeToSocket'. Either include it or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'isNew' and 'sensorAddresses'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has a missing dependency: 'getSensors'. Either include it or remove the dependency array.",["124"],"no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"129","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [getControllers, socket, status]",{"range":"136","text":"137"},"Update the dependencies array to be: [getControllers, status]",{"range":"138","text":"139"},"Update the dependencies array to be: [socket, subscribeToSocket]",{"range":"140","text":"141"},{"range":"142","text":"141"},"Update the dependencies array to be: [controller, isNew, sensorAddresses]",{"range":"143","text":"144"},"Update the dependencies array to be: [getSensors, socket, status]",{"range":"145","text":"146"},[1239,1255],"[getControllers, socket, status]",[652,660],"[getControllers, status]",[906,908],"[socket, subscribeToSocket]",[966,974],[1452,1464],"[controller, isNew, sensorAddresses]",[1515,1531],"[getSensors, socket, status]"]