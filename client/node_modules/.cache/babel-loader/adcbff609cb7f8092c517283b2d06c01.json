{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  brewControllers: \"Not Loaded\"\n};\nexport const controllersSlice = createSlice({\n  name: \"controllers\",\n  initialState,\n  reducers: {\n    addController: (state, action) => {\n      if (state.brewControllers !== \"Not Loaded\") state.brewControllers.push(action.payload);\n    },\n    removeController: (state, action) => {\n      if (state.brewControllers !== \"Not Loaded\") state.brewControllers = state.brewControllers.filter(controller => controller.id !== action.payload.id);\n    },\n    updateController: (state, action) => {\n      if (state.brewControllers !== \"Not Loaded\") state.brewControllers = state.brewControllers.map(controller => {\n        if (controller.id === action.payload.id) return action.payload;\n        return controller;\n      });\n    },\n    loadData: (state, action) => {\n      state.brewControllers = action.payload;\n    }\n  }\n});\nexport const {\n  addController,\n  removeController,\n  updateController,\n  loadData\n} = controllersSlice.actions;\nexport default controllersSlice.reducer;","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/redux/reducers/controllersSlice.ts"],"names":["createSlice","initialState","brewControllers","controllersSlice","name","reducers","addController","state","action","push","payload","removeController","filter","controller","id","updateController","map","loadData","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAOA,MAAMC,YAA6B,GAAG;AACpCC,EAAAA,eAAe,EAAE;AADmB,CAAtC;AAIA,OAAO,MAAMC,gBAAgB,GAAGH,WAAW,CAAC;AAC1CI,EAAAA,IAAI,EAAE,aADoC;AAE1CH,EAAAA,YAF0C;AAG1CI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAkD;AAC/D,UAAID,KAAK,CAACL,eAAN,KAA0B,YAA9B,EACEK,KAAK,CAACL,eAAN,CAAsBO,IAAtB,CAA2BD,MAAM,CAACE,OAAlC;AACH,KAJO;AAKRC,IAAAA,gBAAgB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAkD;AAClE,UAAID,KAAK,CAACL,eAAN,KAA0B,YAA9B,EACEK,KAAK,CAACL,eAAN,GAAwBK,KAAK,CAACL,eAAN,CAAsBU,MAAtB,CACrBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBN,MAAM,CAACE,OAAP,CAAeI,EAD3B,CAAxB;AAGH,KAVO;AAWRC,IAAAA,gBAAgB,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAkD;AAClE,UAAID,KAAK,CAACL,eAAN,KAA0B,YAA9B,EACEK,KAAK,CAACL,eAAN,GAAwBK,KAAK,CAACL,eAAN,CAAsBc,GAAtB,CAA2BH,UAAD,IAAgB;AAChE,YAAIA,UAAU,CAACC,EAAX,KAAkBN,MAAM,CAACE,OAAP,CAAeI,EAArC,EAAyC,OAAON,MAAM,CAACE,OAAd;AACzC,eAAOG,UAAP;AACD,OAHuB,CAAxB;AAIH,KAjBO;AAkBRI,IAAAA,QAAQ,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAoD;AAC5DD,MAAAA,KAAK,CAACL,eAAN,GAAwBM,MAAM,CAACE,OAA/B;AACD;AApBO;AAHgC,CAAD,CAApC;AA2BP,OAAO,MAAM;AAAEJ,EAAAA,aAAF;AAAiBK,EAAAA,gBAAjB;AAAmCI,EAAAA,gBAAnC;AAAqDE,EAAAA;AAArD,IACXd,gBAAgB,CAACe,OADZ;AAGP,eAAef,gBAAgB,CAACgB,OAAhC","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { BrewController } from \"../../models/controller.model\";\r\n\r\nexport interface ControllerState {\r\n  brewControllers: BrewController[] | \"Not Loaded\";\r\n}\r\n\r\nconst initialState: ControllerState = {\r\n  brewControllers: \"Not Loaded\",\r\n};\r\n\r\nexport const controllersSlice = createSlice({\r\n  name: \"controllers\",\r\n  initialState,\r\n  reducers: {\r\n    addController: (state, action: PayloadAction<BrewController>) => {\r\n      if (state.brewControllers !== \"Not Loaded\")\r\n        state.brewControllers.push(action.payload);\r\n    },\r\n    removeController: (state, action: PayloadAction<BrewController>) => {\r\n      if (state.brewControllers !== \"Not Loaded\")\r\n        state.brewControllers = state.brewControllers.filter(\r\n          (controller) => controller.id !== action.payload.id\r\n        );\r\n    },\r\n    updateController: (state, action: PayloadAction<BrewController>) => {\r\n      if (state.brewControllers !== \"Not Loaded\")\r\n        state.brewControllers = state.brewControllers.map((controller) => {\r\n          if (controller.id === action.payload.id) return action.payload;\r\n          return controller;\r\n        });\r\n    },\r\n    loadData: (state, action: PayloadAction<BrewController[]>) => {\r\n      state.brewControllers = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addController, removeController, updateController, loadData } =\r\n  controllersSlice.actions;\r\n\r\nexport default controllersSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}