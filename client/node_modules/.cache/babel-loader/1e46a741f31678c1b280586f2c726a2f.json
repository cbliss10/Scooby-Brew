{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\context\\\\WebsocketContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { io } from \"socket.io-client\";\nimport { createWebsocketMethods } from \"../websocket/controllerFunctions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  status: \"Not Connected\",\n  socket: undefined,\n  methods: []\n};\nconst WebsocketContext = /*#__PURE__*/createContext(initialState);\n\nfunction WebSocketProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // create context state, no need to store in redux\n  const [websocketState, setWebsocketState] = useState(initialState); // debugger;\n\n  useEffect(() => {\n    // if socket has not yet been defined, define and connect.  Websocket will reconnect as automatically.\n    if (websocketState.socket === undefined) {\n      const socket = io(\"http://localhost:3001\"); // set up listeners here\n      // connected\n\n      socket.on(\"connect\", () => {\n        console.log(`Connected to websocket with id: ${socket.id}`);\n      });\n      setWebsocketState({ ...websocketState,\n        status: \"Connecting\",\n        socket,\n        methods: createWebsocketMethods(socket)\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WebsocketContext.Provider, {\n    value: websocketState,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WebSocketProvider, \"5ktpZ2eWUn8O10y8AyWSUF2ap6g=\");\n\n_c = WebSocketProvider;\n\nconst mapStateToProps = state => ({\n  websocketStatus: state.websocketStatus.status\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nconst wrappedProvider = connector(WebSocketProvider);\nexport { wrappedProvider as WebsocketContextProvider, WebsocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/context/WebsocketContext.tsx"],"names":["createContext","useEffect","useState","connect","io","createWebsocketMethods","initialState","status","socket","undefined","methods","WebsocketContext","WebSocketProvider","children","websocketState","setWebsocketState","on","console","log","id","mapStateToProps","state","websocketStatus","mapDispatchToProps","connector","wrappedProvider","WebsocketContextProvider"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,EAAT,QAA2B,kBAA3B;AAEA,SAASC,sBAAT,QAAqD,kCAArD;;AASA,MAAMC,YAA+B,GAAG;AACtCC,EAAAA,MAAM,EAAE,eAD8B;AAEtCC,EAAAA,MAAM,EAAEC,SAF8B;AAGtCC,EAAAA,OAAO,EAAE;AAH6B,CAAxC;AAMA,MAAMC,gBAAgB,gBAAGX,aAAa,CAAoBM,YAApB,CAAtC;;AAMA,SAASM,iBAAT,OAAgD;AAAA;;AAAA,MAArB;AAAEC,IAAAA;AAAF,GAAqB;AAE9C;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,CAAoBI,YAApB,CAApD,CAH8C,CAI9C;;AAEAL,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA,QAAIa,cAAc,CAACN,MAAf,KAA0BC,SAA9B,EAAyC;AACvC,YAAMD,MAA0D,GAAGJ,EAAE,CAAC,uBAAD,CAArE,CADuC,CAGvC;AACA;;AACAI,MAAAA,MAAM,CAACQ,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,QAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCV,MAAM,CAACW,EAAG,EAAzD;AACD,OAFD;AAMAJ,MAAAA,iBAAiB,CAAC,EAAE,GAAGD,cAAL;AAAqBP,QAAAA,MAAM,EAAE,YAA7B;AAA2CC,QAAAA,MAA3C;AAAmDE,QAAAA,OAAO,EAAEL,sBAAsB,CAACG,MAAD;AAAlF,OAAD,CAAjB;AACD;AAEF,GAjBQ,EAiBN,EAjBM,CAAT;AAqBA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEM,cAAlC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAhCQD,iB;;KAAAA,iB;;AAkCT,MAAMQ,eAAe,GAAIC,KAAD,KAAuB;AAC7CC,EAAAA,eAAe,EAAED,KAAK,CAACC,eAAN,CAAsBf;AADM,CAAvB,CAAxB;;AAIA,MAAMgB,kBAAkB,GAAG,EAA3B;AAEA,MAAMC,SAAS,GAAGrB,OAAO,CAACiB,eAAD,EAAkBG,kBAAlB,CAAzB;AAMA,MAAME,eAAe,GAAGD,SAAS,CAACZ,iBAAD,CAAjC;AAEA,SAASa,eAAe,IAAIC,wBAA5B,EAAsDf,gBAAtD","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { io, Socket } from \"socket.io-client\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { createWebsocketMethods, testFunction } from \"../websocket/controllerFunctions\";\r\nimport { ClientToServerEvents, ServerToClientEvents } from \"../../../server/lib/events\";\r\n\r\nexport interface IWebsocketContext {\r\n  status: \"Connected\" | \"Not Connected\" | \"Connecting\"\r\n  socket: Socket<ServerToClientEvents, ClientToServerEvents> | undefined,\r\n  methods: (() => void)[]\r\n}\r\n\r\nconst initialState: IWebsocketContext = {\r\n  status: \"Not Connected\",\r\n  socket: undefined,\r\n  methods: []\r\n}\r\n\r\nconst WebsocketContext = createContext<IWebsocketContext>(initialState);\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nfunction WebSocketProvider({ children }: Props) {\r\n\r\n  // create context state, no need to store in redux\r\n  const [websocketState, setWebsocketState] = useState<IWebsocketContext>(initialState);\r\n  // debugger;\r\n\r\n  useEffect(() => {\r\n\r\n    // if socket has not yet been defined, define and connect.  Websocket will reconnect as automatically.\r\n    if (websocketState.socket === undefined) {\r\n      const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io(\"http://localhost:3001\");\r\n\r\n      // set up listeners here\r\n      // connected\r\n      socket.on(\"connect\", () => {\r\n        console.log(`Connected to websocket with id: ${socket.id}`);\r\n      });\r\n\r\n\r\n\r\n      setWebsocketState({ ...websocketState, status: \"Connecting\", socket, methods: createWebsocketMethods(socket) })\r\n    }\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <WebsocketContext.Provider value={websocketState}>\r\n      {children}\r\n    </WebsocketContext.Provider>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  websocketStatus: state.websocketStatus.status,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ninterface Props extends PropsFromRedux { }\r\n\r\nconst wrappedProvider = connector(WebSocketProvider);\r\n\r\nexport { wrappedProvider as WebsocketContextProvider, WebsocketContext };\r\n"]},"metadata":{},"sourceType":"module"}