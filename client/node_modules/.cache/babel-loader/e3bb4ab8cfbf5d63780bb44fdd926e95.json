{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\configure\\\\ConfigPage.tsx\",\n    _s = $RefreshSig$();\n\n// import { stat } from \"fs\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\n// import Spinner from \"../common/Spinner\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:3001\";\n\nconst ConfigPage = function (props) {\n  _s();\n\n  const [socket, setSocket] = useState();\n  const [brewControllers, setBrewControllers] = useState();\n  useEffect(() => {\n    const newSocket = io(ENDPOINT);\n    setSocket(socket);\n  }, [setSocket]);\n  useEffect(() => {\n    if (socket !== undefined) {\n      socket.emit(\"controller:list\", res => {\n        console.log(res);\n      });\n    }\n  }, [socket]); // const dispatch = useAppDispatch();\n  // const components = props.brewComponents;\n  // const handleChange = (event: FormEvent<HTMLInputElement>) => {\n  //   const component = {\n  //     ...state.component,\n  //     componentName: event.currentTarget.value,\n  //   };\n  //   setState({ component });\n  // };\n  // const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n  //   event.preventDefault();\n  //   dispatch(add(state.component));\n  //   alert(state.component.componentName);\n  // }\n\n  const RenderedComponents = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: brewControllers ? brewControllers.map(controller => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Name: \", controller.name]\n    }, controller.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No controllers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n\n  function handleClick() {//\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"This is the config page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RenderedComponents, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfigPage, \"otCwNeTwdHZqkydGNCc1nqyZImI=\");\n\n_c = ConfigPage;\n\nconst mapState = state => ({\n  brewControllers: state.brewControllerSlice.brewControllers\n});\n\nconst connector = connect(mapState);\nexport default _c2 = connector(ConfigPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ConfigPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/configure/ConfigPage.tsx"],"names":["useEffect","useState","connect","io","ENDPOINT","ConfigPage","props","socket","setSocket","brewControllers","setBrewControllers","newSocket","undefined","emit","res","console","log","RenderedComponents","map","controller","name","handleClick","mapState","state","brewControllerSlice","connector"],"mappings":";;;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAGA;AACA,SAASC,EAAT,QAA2B,kBAA3B;;AAKA,MAAMC,QAAQ,GAAG,uBAAjB;;AAEA,MAAMC,UAAU,GAAG,UAAUC,KAAV,EAAwB;AAAA;;AACzC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,EAApC;AAIA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,EAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAA6D,GACjER,EAAE,CAACC,QAAD,CADJ;AAEAI,IAAAA,SAAS,CAACD,MAAD,CAAT;AACD,GAJQ,EAIN,CAACC,SAAD,CAJM,CAAT;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,MAAM,KAAKK,SAAf,EAA0B;AACxBL,MAAAA,MAAM,CAACM,IAAP,CAAY,iBAAZ,EAAgCC,GAAD,IAAS;AACtCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAFD;AAGD;AACF,GANQ,EAMN,CAACP,MAAD,CANM,CAAT,CAbyC,CAqBzC;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,QAAMU,kBAAkB,GAAG,mBACzB;AAAA,cACGR,eAAe,GACdA,eAAe,CAACS,GAAhB,CAAqBC,UAAD,iBAClB;AAAA,2BAAkCA,UAAU,CAACC,IAA7C;AAAA,OAAUD,UAAU,CAACC,IAArB;AAAA;AAAA;AAAA;AAAA,YADF,CADc,gBAKd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADF;;AAYA,WAASC,WAAT,GAAuB,CACrB;AACD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAtED;;GAAMhB,U;;KAAAA,U;;AAwEN,MAAMiB,QAAQ,GAAIC,KAAD,KAAuB;AACtCd,EAAAA,eAAe,EAAEc,KAAK,CAACC,mBAAN,CAA0Bf;AADL,CAAvB,CAAjB;;AAIA,MAAMgB,SAAS,GAAGvB,OAAO,CAACoB,QAAD,CAAzB;AAQA,qBAAeG,SAAS,CAACpB,UAAD,CAAxB","sourcesContent":["// import { stat } from \"fs\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { BrewController } from \"../../models/controller.model\";\r\nimport { RootState } from \"../../redux/store\";\r\n// import Spinner from \"../common/Spinner\";\r\nimport { io, Socket } from \"socket.io-client\";\r\nimport {\r\n  ClientToServerEvents,\r\n  ServerToClientEvents,\r\n} from \"../../../../server/lib/events\";\r\nconst ENDPOINT = \"http://localhost:3001\";\r\n\r\nconst ConfigPage = function (props: Props) {\r\n  const [socket, setSocket] = useState<\r\n    Socket<ServerToClientEvents, ClientToServerEvents> | undefined\r\n  >();\r\n\r\n  const [brewControllers, setBrewControllers] = useState<BrewController[]>();\r\n\r\n  useEffect(() => {\r\n    const newSocket: Socket<ServerToClientEvents, ClientToServerEvents> =\r\n      io(ENDPOINT);\r\n    setSocket(socket);\r\n  }, [setSocket]);\r\n\r\n  useEffect(() => {\r\n    if (socket !== undefined) {\r\n      socket.emit(\"controller:list\", (res) => {\r\n        console.log(res);\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  // const dispatch = useAppDispatch();\r\n\r\n  // const components = props.brewComponents;\r\n\r\n  // const handleChange = (event: FormEvent<HTMLInputElement>) => {\r\n  //   const component = {\r\n  //     ...state.component,\r\n  //     componentName: event.currentTarget.value,\r\n  //   };\r\n  //   setState({ component });\r\n  // };\r\n\r\n  // const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n  //   event.preventDefault();\r\n  //   dispatch(add(state.component));\r\n  //   alert(state.component.componentName);\r\n  // }\r\n\r\n  const RenderedComponents = () => (\r\n    <div>\r\n      {brewControllers ? (\r\n        brewControllers.map((controller) => (\r\n          <div key={controller.name}>Name: {controller.name}</div>\r\n        ))\r\n      ) : (\r\n        <h3>No controllers</h3>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  function handleClick() {\r\n    //\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>This is the config page.</div>\r\n      <button onClick={handleClick}>Test</button>\r\n      <RenderedComponents />\r\n      {/* <form>\r\n        <input\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          value={state.component.componentName}\r\n        />\r\n        <input type=\"submit\" value=\"Save\" />\r\n      </form> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapState = (state: RootState) => ({\r\n  brewControllers: state.brewControllerSlice.brewControllers,\r\n});\r\n\r\nconst connector = connect(mapState);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ninterface Props extends PropsFromRedux {\r\n  // myToogle: boolean\r\n}\r\n\r\nexport default connector(ConfigPage);\r\n"]},"metadata":{},"sourceType":"module"}