{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\configure\\\\ConfigPage.tsx\",\n    _s = $RefreshSig$();\n\n// import { stat } from \"fs\";\nimport { useContext, useState } from \"react\";\n// import Spinner from \"../common/Spinner\";\nimport { WebSocketContext } from \"../../context/websocketContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testInitialControllers = [{\n  id: \"test\",\n  name: \"name\",\n  description: \"This is a test controller\",\n  sensorAddress: \"12345\",\n  heaterPin: 3\n}];\nexport const ConfigPage = function () {\n  _s();\n\n  const [brewControllers, setBrewControllers] = useState();\n  const {\n    socket,\n    status\n  } = useContext(WebSocketContext);\n\n  const RenderedComponents = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: brewControllers ? brewControllers.map(controller => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Name: \", controller.name]\n    }, controller.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"No controllers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n\n  function handleClick() {\n    //\n    if (socket !== undefined && status === \"Connected\") {\n      socket.emit(\"controller:update\", brewControllers);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"This is the config page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RenderedComponents, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfigPage, \"kJ4KTZLAgNk+QL9KDfbs7sj3y3s=\");\n\n_c = ConfigPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigPage\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/configure/ConfigPage.tsx"],"names":["useContext","useState","WebSocketContext","testInitialControllers","id","name","description","sensorAddress","heaterPin","ConfigPage","brewControllers","setBrewControllers","socket","status","RenderedComponents","map","controller","handleClick","undefined","emit"],"mappings":";;;AAAA;AACA,SAASA,UAAT,EAAgCC,QAAhC,QAAgD,OAAhD;AAEA;AACA,SAASC,gBAAT,QAAiC,gCAAjC;;AAEA,MAAMC,sBAAwC,GAAG,CAC/C;AACEC,EAAAA,EAAE,EAAE,MADN;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,WAAW,EAAE,2BAHf;AAIEC,EAAAA,aAAa,EAAE,OAJjB;AAKEC,EAAAA,SAAS,EAAE;AALb,CAD+C,CAAjD;AAUA,OAAO,MAAMC,UAAU,GAAG,YAAY;AAAA;;AACpC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,EAAtD;AAEA,QAAM;AAAEW,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBb,UAAU,CAACE,gBAAD,CAArC;;AAEA,QAAMY,kBAAkB,GAAG,mBACzB;AAAA,cACGJ,eAAe,GACdA,eAAe,CAACK,GAAhB,CAAqBC,UAAD,iBAClB;AAAA,2BAAkCA,UAAU,CAACX,IAA7C;AAAA,OAAUW,UAAU,CAACX,IAArB;AAAA;AAAA;AAAA;AAAA,YADF,CADc,gBAKd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADF;;AAYA,WAASY,WAAT,GAAuB;AACrB;AACA,QAAIL,MAAM,KAAKM,SAAX,IAAwBL,MAAM,KAAK,WAAvC,EAAoD;AAClDD,MAAAA,MAAM,CAACO,IAAP,CAAY,mBAAZ,EAAiCT,eAAjC;AACD;AACF;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEO,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAvCM;;GAAMR,U;;KAAAA,U","sourcesContent":["// import { stat } from \"fs\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { BrewController } from \"../../../../server/lib/models/controllerModels\";\r\n// import Spinner from \"../common/Spinner\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\n\r\nconst testInitialControllers: BrewController[] = [\r\n  {\r\n    id: \"test\",\r\n    name: \"name\",\r\n    description: \"This is a test controller\",\r\n    sensorAddress: \"12345\",\r\n    heaterPin: 3,\r\n  },\r\n];\r\n\r\nexport const ConfigPage = function () {\r\n  const [brewControllers, setBrewControllers] = useState<BrewController[]>();\r\n\r\n  const { socket, status } = useContext(WebSocketContext);\r\n\r\n  const RenderedComponents = () => (\r\n    <div>\r\n      {brewControllers ? (\r\n        brewControllers.map((controller) => (\r\n          <div key={controller.name}>Name: {controller.name}</div>\r\n        ))\r\n      ) : (\r\n        <h3>No controllers</h3>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  function handleClick() {\r\n    //\r\n    if (socket !== undefined && status === \"Connected\") {\r\n      socket.emit(\"controller:update\", brewControllers);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>This is the config page.</div>\r\n      <button onClick={handleClick}>Test</button>\r\n      <RenderedComponents />\r\n      {/* <form>\r\n        <input\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          value={state.component.componentName}\r\n        />\r\n        <input type=\"submit\" value=\"Save\" />\r\n      </form> */}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}