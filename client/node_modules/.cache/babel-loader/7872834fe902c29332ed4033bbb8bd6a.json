{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\configure\\\\ConfigPage.tsx\",\n    _s = $RefreshSig$();\n\n// import { stat } from \"fs\";\nimport { useContext, useEffect, useState } from \"react\";\n// import Spinner from \"../common/Spinner\";\nimport { WebSocketContext } from \"../../context/websocketContext\";\nimport Spinner from \"../common/Spinner\";\nimport { ControllerModal } from \"./ControllerModal\";\nimport { ControllerPanel } from \"./ControllersPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testInitialControllers = [{\n  id: \"test\",\n  name: \"name\",\n  description: \"This is a test controller\",\n  sensorAddress: \"12345\",\n  heaterPin: 3\n}];\nexport const ConfigPage = function () {\n  _s();\n\n  const [brewControllers, setBrewControllers] = useState(testInitialControllers);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedController, setSelectedController] = useState();\n  const {\n    socket,\n    status\n  } = useContext(WebSocketContext);\n  useEffect(() => {\n    getControllers();\n  }, [socket, status]);\n\n  function getControllers() {\n    if (socket !== undefined && status === \"Connected\") {\n      socket.emit(\"controller:list\", res => {\n        if (\"error\" in res) {\n          console.log(res.error);\n        } else {\n          setBrewControllers(res.data);\n          setIsLoaded(true);\n        }\n      });\n    }\n  }\n\n  function deleteController(controller) {\n    if (window.confirm(`Are you sure you would like to delete controller ${controller.name}`)) {\n      if (socket !== undefined) {\n        socket.emit(\"controller:delete\", controller.id, res => {\n          console.log(res);\n          getControllers();\n        });\n      }\n    }\n  }\n\n  function updateController(controller) {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Brewery Configuration!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: isLoaded && brewControllers !== undefined ? /*#__PURE__*/_jsxDEV(ControllerPanel, {\n        controllers: brewControllers,\n        deleteController: deleteController\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Loading ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControllerModal, {\n      controller: selectedController,\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfigPage, \"YXzVKfGyFBY5FfzNRvGmwrdyCzk=\");\n\n_c = ConfigPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigPage\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/configure/ConfigPage.tsx"],"names":["useContext","useEffect","useState","WebSocketContext","Spinner","ControllerModal","ControllerPanel","testInitialControllers","id","name","description","sensorAddress","heaterPin","ConfigPage","brewControllers","setBrewControllers","isLoaded","setIsLoaded","selectedController","setSelectedController","socket","status","getControllers","undefined","emit","res","console","log","error","data","deleteController","controller","window","confirm","updateController"],"mappings":";;;AAAA;AACA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AAEA;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,eAAT,QAAgC,oBAAhC;;AAEA,MAAMC,sBAAwC,GAAG,CAC/C;AACEC,EAAAA,EAAE,EAAE,MADN;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,WAAW,EAAE,2BAHf;AAIEC,EAAAA,aAAa,EAAE,OAJjB;AAKEC,EAAAA,SAAS,EAAE;AALb,CAD+C,CAAjD;AAUA,OAAO,MAAMC,UAAU,GAAG,YAAY;AAAA;;AACpC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CACpDK,sBADoD,CAAtD;AAGA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM,CAACgB,kBAAD,EAAqBC,qBAArB,IACJjB,QAAQ,EADV;AAEA,QAAM;AAAEkB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBrB,UAAU,CAACG,gBAAD,CAArC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,cAAc;AACf,GAFQ,EAEN,CAACF,MAAD,EAASC,MAAT,CAFM,CAAT;;AAIA,WAASC,cAAT,GAA0B;AACxB,QAAIF,MAAM,KAAKG,SAAX,IAAwBF,MAAM,KAAK,WAAvC,EAAoD;AAClDD,MAAAA,MAAM,CAACI,IAAP,CAAY,iBAAZ,EAAgCC,GAAD,IAAS;AACtC,YAAI,WAAWA,GAAf,EAAoB;AAClBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,KAAhB;AACD,SAFD,MAEO;AACLb,UAAAA,kBAAkB,CAACU,GAAG,CAACI,IAAL,CAAlB;AACAZ,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,OAPD;AAQD;AACF;;AAED,WAASa,gBAAT,CAA0BC,UAA1B,EAAsD;AACpD,QACEC,MAAM,CAACC,OAAP,CACG,oDAAmDF,UAAU,CAACtB,IAAK,EADtE,CADF,EAIE;AACA,UAAIW,MAAM,KAAKG,SAAf,EAA0B;AACxBH,QAAAA,MAAM,CAACI,IAAP,CAAY,mBAAZ,EAAiCO,UAAU,CAACvB,EAA5C,EAAiDiB,GAAD,IAAS;AACvDC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAH,UAAAA,cAAc;AACf,SAHD;AAID;AACF;AACF;;AAED,WAASY,gBAAT,CAA0BH,UAA1B,EAAsD,CAAE;;AAExD,sBACE;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA,gBACGf,QAAQ,IAAIF,eAAe,KAAKS,SAAhC,gBACC,QAAC,eAAD;AACE,QAAA,WAAW,EAAET,eADf;AAEE,QAAA,gBAAgB,EAAEgB;AAFpB;AAAA;AAAA;AAAA;AAAA,cADD,gBAMC;AAAA,gCACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YAFF,eAeE,QAAC,eAAD;AAAiB,MAAA,UAAU,EAAEZ,kBAA7B;AAAiD,MAAA,MAAM,EAAEE;AAAzD;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA9DM;;GAAMP,U;;KAAAA,U","sourcesContent":["// import { stat } from \"fs\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { BrewController } from \"../../../../server/lib/models/controllerModels\";\r\n// import Spinner from \"../common/Spinner\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\nimport Spinner from \"../common/Spinner\";\r\nimport { ControllerModal } from \"./ControllerModal\";\r\nimport { ControllerPanel } from \"./ControllersPanel\";\r\n\r\nconst testInitialControllers: BrewController[] = [\r\n  {\r\n    id: \"test\",\r\n    name: \"name\",\r\n    description: \"This is a test controller\",\r\n    sensorAddress: \"12345\",\r\n    heaterPin: 3,\r\n  },\r\n];\r\n\r\nexport const ConfigPage = function () {\r\n  const [brewControllers, setBrewControllers] = useState<BrewController[]>(\r\n    testInitialControllers\r\n  );\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [selectedController, setSelectedController] =\r\n    useState<BrewController>();\r\n  const { socket, status } = useContext(WebSocketContext);\r\n\r\n  useEffect(() => {\r\n    getControllers();\r\n  }, [socket, status]);\r\n\r\n  function getControllers() {\r\n    if (socket !== undefined && status === \"Connected\") {\r\n      socket.emit(\"controller:list\", (res) => {\r\n        if (\"error\" in res) {\r\n          console.log(res.error);\r\n        } else {\r\n          setBrewControllers(res.data);\r\n          setIsLoaded(true);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function deleteController(controller: BrewController) {\r\n    if (\r\n      window.confirm(\r\n        `Are you sure you would like to delete controller ${controller.name}`\r\n      )\r\n    ) {\r\n      if (socket !== undefined) {\r\n        socket.emit(\"controller:delete\", controller.id, (res) => {\r\n          console.log(res);\r\n          getControllers();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  function updateController(controller: BrewController) {}\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-center\">Brewery Configuration!</h1>\r\n      <div className=\"d-flex justify-content-center\">\r\n        {isLoaded && brewControllers !== undefined ? (\r\n          <ControllerPanel\r\n            controllers={brewControllers}\r\n            deleteController={deleteController}\r\n          />\r\n        ) : (\r\n          <div>\r\n            <Spinner />\r\n            <h2>Loading ...</h2>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <ControllerModal controller={selectedController} socket={socket} />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}