{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\configure\\\\ConfigPage.tsx\",\n    _s = $RefreshSig$();\n\n// import { stat } from \"fs\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\n// import Spinner from \"../common/Spinner\";\nimport { WebSocketContext } from \"../../context/websocketContext\";\nimport Spinner from \"../common/Spinner\";\nimport { ControllerModal } from \"./ControllerModal\";\nimport { ControllerPanel } from \"./ControllersPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testInitialControllers = [{\n  id: \"test\",\n  name: \"name\",\n  description: \"This is a test controller\",\n  sensorAddress: \"12345\",\n  heaterPin: 3\n}];\nexport const ConfigPage = function () {\n  _s();\n\n  const [brewControllers, setBrewControllers] = useState(testInitialControllers);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedController, setSelectedController] = useState(undefined);\n  const [isNew, setIsNew] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const {\n    socket,\n    status\n  } = useContext(WebSocketContext);\n  useEffect(() => {\n    getControllers();\n  }, [socket, status]);\n\n  function getControllers() {\n    if (socket !== undefined && status === \"Connected\") {\n      socket.emit(\"controller:list\", res => {\n        if (\"error\" in res) {\n          console.log(res.error);\n        } else {\n          setBrewControllers(res.data);\n          setIsLoaded(true);\n        }\n      });\n    }\n  }\n\n  function deleteController(controller) {\n    if (window.confirm(`Are you sure you would like to delete controller ${controller.name}`)) {\n      if (socket !== undefined) {\n        socket.emit(\"controller:delete\", controller.id, res => {\n          console.log(res);\n          getControllers();\n        });\n      }\n    }\n  }\n\n  function addOrUpdateController(controller, isNew) {\n    if (socket !== undefined) {\n      if (isNew) {\n        const addController = controller;\n        socket.emit(\"controller:add\", addController, res => {\n          console.log(res);\n        });\n      } else {\n        const updateController = controller;\n        socket.emit(\"controller:update\", updateController, res => {\n          console.log(res);\n        });\n      }\n\n      console.log(\"addOrUpdateController\");\n    }\n  }\n\n  function editController(controller) {\n    console.log(\"updateController\");\n    setSelectedController(controller);\n    setIsNew(false);\n    setIsModalOpen(true);\n  }\n\n  function newController() {\n    console.log(\"newController\");\n    setSelectedController(undefined);\n    setIsNew(true);\n    setIsModalOpen(true);\n  }\n\n  function closeModal() {\n    setIsModalOpen(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Brewery Configuration!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: isLoaded && brewControllers !== undefined ? /*#__PURE__*/_jsxDEV(ControllerPanel, {\n        controllers: brewControllers,\n        deleteController: deleteController,\n        editController: editController\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Loading ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: newController,\n      children: \"Add New Controller\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControllerModal, {\n      controller: selectedController,\n      show: isModalOpen,\n      onSubmit: addOrUpdateController,\n      closeModal: closeModal,\n      isNew: isNew\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfigPage, \"rDq/l7vEqsqExW5lTbdJ6nYUscw=\");\n\n_c = ConfigPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigPage\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/configure/ConfigPage.tsx"],"names":["useContext","useEffect","useState","Button","WebSocketContext","Spinner","ControllerModal","ControllerPanel","testInitialControllers","id","name","description","sensorAddress","heaterPin","ConfigPage","brewControllers","setBrewControllers","isLoaded","setIsLoaded","selectedController","setSelectedController","undefined","isNew","setIsNew","isModalOpen","setIsModalOpen","socket","status","getControllers","emit","res","console","log","error","data","deleteController","controller","window","confirm","addOrUpdateController","addController","updateController","editController","newController","closeModal"],"mappings":"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","sourcesContent":["// import { stat } from \"fs\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { BrewController } from \"../../../../server/lib/models/controllerModels\";\r\n// import Spinner from \"../common/Spinner\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\nimport Spinner from \"../common/Spinner\";\r\nimport { ControllerModal } from \"./ControllerModal\";\r\nimport { ControllerPanel } from \"./ControllersPanel\";\r\n\r\nconst testInitialControllers: BrewController[] = [\r\n  {\r\n    id: \"test\",\r\n    name: \"name\",\r\n    description: \"This is a test controller\",\r\n    sensorAddress: \"12345\",\r\n    heaterPin: 3,\r\n  },\r\n];\r\n\r\nexport const ConfigPage = function () {\r\n  const [brewControllers, setBrewControllers] = useState<BrewController[]>(\r\n    testInitialControllers\r\n  );\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const [selectedController, setSelectedController] = useState<\r\n    BrewController | undefined\r\n  >(undefined);\r\n  const [isNew, setIsNew] = useState<boolean>(true);\r\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\r\n  const { socket, status } = useContext(WebSocketContext);\r\n\r\n  useEffect(() => {\r\n    getControllers();\r\n  }, [socket, status]);\r\n\r\n  function getControllers() {\r\n    if (socket !== undefined && status === \"Connected\") {\r\n      socket.emit(\"controller:list\", (res) => {\r\n        if (\"error\" in res) {\r\n          console.log(res.error);\r\n        } else {\r\n          setBrewControllers(res.data);\r\n          setIsLoaded(true);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function deleteController(controller: BrewController) {\r\n    if (\r\n      window.confirm(\r\n        `Are you sure you would like to delete controller ${controller.name}`\r\n      )\r\n    ) {\r\n      if (socket !== undefined) {\r\n        socket.emit(\"controller:delete\", controller.id, (res) => {\r\n          console.log(res);\r\n          getControllers();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  function addOrUpdateController(\r\n    controller: BrewController | Omit<BrewController, \"id\">,\r\n    isNew: boolean\r\n  ) {\r\n    if (socket !== undefined) {\r\n      if (isNew) {\r\n        const addController = controller as Omit<BrewController, \"id\">;\r\n        socket.emit(\"controller:add\", addController, (res) => {\r\n          console.log(res);\r\n        });\r\n      } else {\r\n        const updateController = controller as BrewController;\r\n        socket.emit(\"controller:update\", updateController, (res) => {\r\n          console.log(res);\r\n        });\r\n      }\r\n      console.log(\"addOrUpdateController\");\r\n    }\r\n  }\r\n\r\n  function editController(controller: BrewController) {\r\n    console.log(\"updateController\");\r\n    setSelectedController(controller);\r\n    setIsNew(false);\r\n    setIsModalOpen(true);\r\n  }\r\n\r\n  function newController() {\r\n    console.log(\"newController\");\r\n    setSelectedController(undefined);\r\n    setIsNew(true);\r\n    setIsModalOpen(true);\r\n  }\r\n\r\n  function closeModal() {\r\n    setIsModalOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-center\">Brewery Configuration!</h1>\r\n      <div className=\"d-flex justify-content-center\">\r\n        {isLoaded && brewControllers !== undefined ? (\r\n          <ControllerPanel\r\n            controllers={brewControllers}\r\n            deleteController={deleteController}\r\n            editController={editController}\r\n          />\r\n        ) : (\r\n          <div>\r\n            <Spinner />\r\n            <h2>Loading ...</h2>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <Button variant=\"primary\" onClick={newController}>\r\n        Add New Controller\r\n      </Button>\r\n      <ControllerModal\r\n        controller={selectedController}\r\n        show={isModalOpen}\r\n        onSubmit={addOrUpdateController}\r\n        closeModal={closeModal}\r\n        isNew={isNew}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}