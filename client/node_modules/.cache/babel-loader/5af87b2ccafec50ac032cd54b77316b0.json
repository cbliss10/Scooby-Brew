{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\brew\\\\BrewPanel.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { PowerLevelComponent } from \"./HeatControl\";\nimport { TemperatureDisplay } from \"./TempDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const initialState = new BrewControllerState();\nexport function BrewPanel(props) {\n  _s();\n\n  const {\n    controller,\n    socket\n  } = props;\n  const units = \"F\"; // const { socket, status } = useContext(WebSocketContext);\n\n  const [powerLevel, setPowerLevel] = useState(0);\n  const [temp, setTemp] = useState(\"--\");\n  useEffect(() => {\n    if (socket !== undefined) {\n      socket.on(\"connect\", () => {});\n      socket.on(\"brew:update\", updatedStates => {\n        try {\n          updatedStates.forEach(controllerDto => {\n            if (controller.id == controllerDto.id) {\n              setTemp(controllerDto.temperature);\n              setPowerLevel(controllerDto.powerLevel);\n              return;\n            }\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    }\n  }, [socket]);\n\n  const adjustPowerLevel = adjustment => {\n    const powerAdjustmentDto = {\n      id: controller.id,\n      powerLevel\n    };\n    powerAdjustmentDto.powerLevel += adjustment;\n    if (powerAdjustmentDto.powerLevel > 100) powerAdjustmentDto.powerLevel = 100;else if (powerAdjustmentDto.powerLevel < 0) powerAdjustmentDto.powerLevel = 0;\n\n    if (socket !== undefined) {\n      socket.emit(\"brew:adjust\", powerAdjustmentDto, res => {\n        if (res !== undefined) {\n          if (\"error\" in res) {\n            console.log(res.error);\n            return;\n          }\n\n          const newPower = res.data;\n          console.log(`Power level set to ${newPower.powerLevel}`);\n          setPowerLevel(res.data.powerLevel);\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-inline-flex flex-column p-2 border \",\n    children: [/*#__PURE__*/_jsxDEV(TemperatureDisplay, {\n      temperature: temp,\n      units: units\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PowerLevelComponent, {\n      powerLevel: powerLevel,\n      adjustPowerLevel: adjustPowerLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BrewPanel, \"sbIOA9lbHGv37vVa4lk7o09Y9ss=\");\n\n_c = BrewPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrewPanel\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/brew/BrewPanel.tsx"],"names":["useEffect","useState","PowerLevelComponent","TemperatureDisplay","BrewPanel","props","controller","socket","units","powerLevel","setPowerLevel","temp","setTemp","undefined","on","updatedStates","forEach","controllerDto","id","temperature","err","console","log","adjustPowerLevel","adjustment","powerAdjustmentDto","emit","res","error","newPower","data"],"mappings":";;;AAAA,SAAqBA,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AAcA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,kBAAT,QAAmC,eAAnC;;AAOA;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAiC;AAAA;;AACtC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAyBF,KAA/B;AACA,QAAMG,KAAK,GAAG,GAAd,CAFsC,CAGtC;;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAS,CAAT,CAA5C;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAwB,IAAxB,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,MAAM,KAAKM,SAAf,EAA0B;AACxBN,MAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,MAAM,CAAE,CAA7B;AACAP,MAAAA,MAAM,CAACO,EAAP,CAAU,aAAV,EAA0BC,aAAD,IAAmB;AAC1C,YAAI;AACFA,UAAAA,aAAa,CAACC,OAAd,CAAuBC,aAAD,IAAmB;AACvC,gBAAIX,UAAU,CAACY,EAAX,IAAiBD,aAAa,CAACC,EAAnC,EAAuC;AACrCN,cAAAA,OAAO,CAACK,aAAa,CAACE,WAAf,CAAP;AACAT,cAAAA,aAAa,CAACO,aAAa,CAACR,UAAf,CAAb;AACA;AACD;AACF,WAND;AAOD,SARD,CAQE,OAAOW,GAAP,EAAY;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,OAZD;AAaD;AACF,GAjBQ,EAiBN,CAACb,MAAD,CAjBM,CAAT;;AAmBA,QAAMgB,gBAAgB,GAAIC,UAAD,IAAwB;AAC/C,UAAMC,kBAA4C,GAAG;AACnDP,MAAAA,EAAE,EAAEZ,UAAU,CAACY,EADoC;AAEnDT,MAAAA;AAFmD,KAArD;AAIAgB,IAAAA,kBAAkB,CAAChB,UAAnB,IAAiCe,UAAjC;AACA,QAAIC,kBAAkB,CAAChB,UAAnB,GAAgC,GAApC,EACEgB,kBAAkB,CAAChB,UAAnB,GAAgC,GAAhC,CADF,KAEK,IAAIgB,kBAAkB,CAAChB,UAAnB,GAAgC,CAApC,EACHgB,kBAAkB,CAAChB,UAAnB,GAAgC,CAAhC;;AACF,QAAIF,MAAM,KAAKM,SAAf,EAA0B;AACxBN,MAAAA,MAAM,CAACmB,IAAP,CAAY,aAAZ,EAA2BD,kBAA3B,EAAgDE,GAAD,IAAS;AACtD,YAAIA,GAAG,KAAKd,SAAZ,EAAuB;AACrB,cAAI,WAAWc,GAAf,EAAoB;AAClBN,YAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACC,KAAhB;AACA;AACD;;AACD,gBAAMC,QAAQ,GAAGF,GAAG,CAACG,IAArB;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBO,QAAQ,CAACpB,UAAW,EAAtD;AACAC,UAAAA,aAAa,CAACiB,GAAG,CAACG,IAAJ,CAASrB,UAAV,CAAb;AACD;AACF,OAVD;AAWD;AACF,GAvBD;;AAyBA,sBACE;AAAK,IAAA,SAAS,EAAC,uCAAf;AAAA,4BACE,QAAC,kBAAD;AAAoB,MAAA,WAAW,EAAEE,IAAjC;AAAuC,MAAA,KAAK,EAAEH;AAA9C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,mBAAD;AACE,MAAA,UAAU,EAAEC,UADd;AAEE,MAAA,gBAAgB,EAAEc;AAFpB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA5DenB,S;;KAAAA,S","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport {\r\n  ClientToServerEvents,\r\n  ServerToClientEvents,\r\n} from \"../../../../server/lib/events\";\r\nimport {\r\n  BrewController,\r\n  ControllerId,\r\n  ControllerTemperature,\r\n  PowerLevelAdjustmentData,\r\n  UpdateDto,\r\n} from \"../../../../server/lib/models/controllerModels\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\nimport { PowerLevelComponent } from \"./HeatControl\";\r\nimport { TemperatureDisplay } from \"./TempDisplay\";\r\n\r\ninterface Props {\r\n  controller: BrewController;\r\n  socket: Socket<ServerToClientEvents, ClientToServerEvents> | undefined;\r\n}\r\n\r\n// const initialState = new BrewControllerState();\r\n\r\nexport function BrewPanel(props: Props) {\r\n  const { controller, socket } = props;\r\n  const units = \"F\";\r\n  // const { socket, status } = useContext(WebSocketContext);\r\n  const [powerLevel, setPowerLevel] = useState<number>(0);\r\n  const [temp, setTemp] = useState<ControllerTemperature>(\"--\");\r\n\r\n  useEffect(() => {\r\n    if (socket !== undefined) {\r\n      socket.on(\"connect\", () => {});\r\n      socket.on(\"brew:update\", (updatedStates) => {\r\n        try {\r\n          updatedStates.forEach((controllerDto) => {\r\n            if (controller.id == controllerDto.id) {\r\n              setTemp(controllerDto.temperature);\r\n              setPowerLevel(controllerDto.powerLevel);\r\n              return;\r\n            }\r\n          });\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  const adjustPowerLevel = (adjustment: number) => {\r\n    const powerAdjustmentDto: PowerLevelAdjustmentData = {\r\n      id: controller.id,\r\n      powerLevel,\r\n    };\r\n    powerAdjustmentDto.powerLevel += adjustment;\r\n    if (powerAdjustmentDto.powerLevel > 100)\r\n      powerAdjustmentDto.powerLevel = 100;\r\n    else if (powerAdjustmentDto.powerLevel < 0)\r\n      powerAdjustmentDto.powerLevel = 0;\r\n    if (socket !== undefined) {\r\n      socket.emit(\"brew:adjust\", powerAdjustmentDto, (res) => {\r\n        if (res !== undefined) {\r\n          if (\"error\" in res) {\r\n            console.log(res.error);\r\n            return;\r\n          }\r\n          const newPower = res.data;\r\n          console.log(`Power level set to ${newPower.powerLevel}`);\r\n          setPowerLevel(res.data.powerLevel);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-inline-flex flex-column p-2 border \">\r\n      <TemperatureDisplay temperature={temp} units={units} />\r\n      <PowerLevelComponent\r\n        powerLevel={powerLevel}\r\n        adjustPowerLevel={adjustPowerLevel}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}