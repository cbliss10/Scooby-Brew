{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\brew\\\\BrewPanel.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { WebSocketContext } from \"../../context/websocketContext\";\nimport { PowerLevelComponent } from \"./HeatControl\";\nimport { TemperatureDisplay } from \"./TempDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const initialState = new BrewControllerState();\nexport function BrewPanel(props) {\n  _s();\n\n  const {\n    controller\n  } = props;\n  const units = \"F\";\n  const {\n    socket,\n    status\n  } = useContext(WebSocketContext);\n  const [powerLevel, setPowerLevel] = useState(0);\n  const [temp, setTemp] = useState(\"--\");\n  useEffect(() => {\n    console.log(\"socket is \" + socket);\n\n    if (socket !== undefined) {\n      console.log(\"socket is \" + status);\n      socket.on(\"connect\", () => {\n        console.log(\"connect detected on brew panel\");\n        socket.on(\"brew:update\", updatedStates => {\n          const updatedState = updatedStates.get(controller.id);\n\n          if (updatedState !== undefined) {\n            setTemp(updatedState.temperature);\n            setPowerLevel(updatedState.powerLevel);\n          }\n        });\n      });\n    }\n  }, [socket]);\n\n  const adjustPowerLevel = adjustment => {\n    const updatedController = {\n      id: controller.id,\n      powerLevel\n    };\n    updatedController.powerLevel += adjustment;\n    if (updatedController.powerLevel > 100) updatedController.powerLevel = 100;else if (updatedController.powerLevel < 0) updatedController.powerLevel = 0;\n\n    if (socket !== undefined) {\n      socket.emit(\"brew:adjust\", updatedController, res => {\n        if (res !== undefined) {\n          if (\"error\" in res) {\n            console.log(res.error);\n            return;\n          }\n\n          const newPower = res.data;\n          console.log(`Power level set to ${newPower.powerLevel}`);\n          setPowerLevel(res.data.powerLevel);\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-inline-flex flex-column p-2 border \",\n    children: [/*#__PURE__*/_jsxDEV(TemperatureDisplay, {\n      temperature: temp,\n      units: units\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PowerLevelComponent, {\n      powerLevel: powerLevel,\n      adjustPowerLevel: adjustPowerLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BrewPanel, \"YZrFR60cyLSWg9bdSnmslDX39MM=\");\n\n_c = BrewPanel;\n\nvar _c;\n\n$RefreshReg$(_c, \"BrewPanel\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/brew/BrewPanel.tsx"],"names":["useContext","useEffect","useState","WebSocketContext","PowerLevelComponent","TemperatureDisplay","BrewPanel","props","controller","units","socket","status","powerLevel","setPowerLevel","temp","setTemp","console","log","undefined","on","updatedStates","updatedState","get","id","temperature","adjustPowerLevel","adjustment","updatedController","emit","res","error","newPower","data"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  BrewController,\r\n  ControllerTemperature,\r\n  PowerLevelAdjustmentData,\r\n} from \"../../../../server/lib/models/controllerModels\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\nimport { PowerLevelComponent } from \"./HeatControl\";\r\nimport { TemperatureDisplay } from \"./TempDisplay\";\r\n\r\ninterface Props {\r\n  controller: BrewController;\r\n}\r\n\r\n// const initialState = new BrewControllerState();\r\n\r\nexport function BrewPanel(props: Props) {\r\n  const { controller } = props;\r\n  const units = \"F\";\r\n  const { socket, status } = useContext(WebSocketContext);\r\n  const [powerLevel, setPowerLevel] = useState<number>(0);\r\n  const [temp, setTemp] = useState<ControllerTemperature>(\"--\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"socket is \" + socket);\r\n    if (socket !== undefined) {\r\n      console.log(\"socket is \" + status);\r\n      socket.on(\"connect\", () => {\r\n        console.log(\"connect detected on brew panel\");\r\n        socket.on(\"brew:update\", (updatedStates) => {\r\n          const updatedState = updatedStates.get(controller.id);\r\n          if (updatedState !== undefined) {\r\n            setTemp(updatedState.temperature);\r\n            setPowerLevel(updatedState.powerLevel);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  const adjustPowerLevel = (adjustment: number) => {\r\n    const updatedController: PowerLevelAdjustmentData = {\r\n      id: controller.id,\r\n      powerLevel,\r\n    };\r\n    updatedController.powerLevel += adjustment;\r\n    if (updatedController.powerLevel > 100) updatedController.powerLevel = 100;\r\n    else if (updatedController.powerLevel < 0) updatedController.powerLevel = 0;\r\n    if (socket !== undefined) {\r\n      socket.emit(\"brew:adjust\", updatedController, (res) => {\r\n        if (res !== undefined) {\r\n          if (\"error\" in res) {\r\n            console.log(res.error);\r\n            return;\r\n          }\r\n          const newPower = res.data;\r\n          console.log(`Power level set to ${newPower.powerLevel}`);\r\n          setPowerLevel(res.data.powerLevel);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-inline-flex flex-column p-2 border \">\r\n      <TemperatureDisplay temperature={temp} units={units} />\r\n      <PowerLevelComponent\r\n        powerLevel={powerLevel}\r\n        adjustPowerLevel={adjustPowerLevel}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}