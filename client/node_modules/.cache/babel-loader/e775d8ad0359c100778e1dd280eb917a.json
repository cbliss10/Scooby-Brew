{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\context\\\\WebsocketContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  status: \"Not Connected\",\n  socket: undefined\n};\nconst WebsocketContext = /*#__PURE__*/createContext(initialState);\n\nfunction WebSocketProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // create context state, no need to store in redux\n  const [websocketState, setWebsocketState] = useState(initialState); // debugger;\n\n  useEffect(() => {\n    // if socket has not yet been defined, define and connect.  Websocket will reconnect as automatically.\n    if (websocketState.socket === undefined) {\n      const socket = io(\"http://localhost:3001\"); // set up listeners here\n      // connected\n\n      socket.on(\"connect\", () => {\n        console.log(`Connected to websocket with id: ${socket.id}`);\n        setWebsocketState({ ...websocketState,\n          status: \"Connected\"\n        });\n      });\n      setWebsocketState({ ...websocketState,\n        status: \"Connecting\",\n        socket\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WebsocketContext.Provider, {\n    value: websocketState,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WebSocketProvider, \"5ktpZ2eWUn8O10y8AyWSUF2ap6g=\");\n\n_c = WebSocketProvider;\n\nconst mapStateToProps = state => ({\n  websocketStatus: state.websocketStatus.status\n});\n\nconst mapDispatchToProps = {};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nconst wrappedProvider = connector(WebSocketProvider);\nexport { wrappedProvider as WebsocketContextProvider, WebsocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/context/WebsocketContext.tsx"],"names":["createContext","useEffect","useState","connect","io","initialState","status","socket","undefined","WebsocketContext","WebSocketProvider","children","websocketState","setWebsocketState","on","console","log","id","mapStateToProps","state","websocketStatus","mapDispatchToProps","connector","wrappedProvider","WebsocketContextProvider"],"mappings":";;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,EAAT,QAA2B,kBAA3B;;AAYA,MAAMC,YAA+B,GAAG;AACtCC,EAAAA,MAAM,EAAE,eAD8B;AAEtCC,EAAAA,MAAM,EAAEC;AAF8B,CAAxC;AAKA,MAAMC,gBAAgB,gBAAGT,aAAa,CAAoBK,YAApB,CAAtC;;AAMA,SAASK,iBAAT,OAAgD;AAAA;;AAAA,MAArB;AAAEC,IAAAA;AAAF,GAAqB;AAC9C;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IACJX,QAAQ,CAAoBG,YAApB,CADV,CAF8C,CAI9C;;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIW,cAAc,CAACL,MAAf,KAA0BC,SAA9B,EAAyC;AACvC,YAAMD,MAA0D,GAAGH,EAAE,CACnE,uBADmE,CAArE,CADuC,CAKvC;AACA;;AACAG,MAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBC,QAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCT,MAAM,CAACU,EAAG,EAAzD;AACAJ,QAAAA,iBAAiB,CAAC,EAAE,GAAGD,cAAL;AAAqBN,UAAAA,MAAM,EAAE;AAA7B,SAAD,CAAjB;AACD,OAHD;AAKAO,MAAAA,iBAAiB,CAAC,EAAE,GAAGD,cAAL;AAAqBN,QAAAA,MAAM,EAAE,YAA7B;AAA2CC,QAAAA;AAA3C,OAAD,CAAjB;AACD;AACF,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEK,cAAlC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA7BQD,iB;;KAAAA,iB;;AA+BT,MAAMQ,eAAe,GAAIC,KAAD,KAAuB;AAC7CC,EAAAA,eAAe,EAAED,KAAK,CAACC,eAAN,CAAsBd;AADM,CAAvB,CAAxB;;AAIA,MAAMe,kBAAkB,GAAG,EAA3B;AAEA,MAAMC,SAAS,GAAGnB,OAAO,CAACe,eAAD,EAAkBG,kBAAlB,CAAzB;AAMA,MAAME,eAAe,GAAGD,SAAS,CAACZ,iBAAD,CAAjC;AAEA,SAASa,eAAe,IAAIC,wBAA5B,EAAsDf,gBAAtD","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { io, Socket } from \"socket.io-client\";\r\nimport { RootState } from \"../redux/store\";\r\nimport {\r\n  ClientToServerEvents,\r\n  ServerToClientEvents,\r\n} from \"../../../server/lib/events\";\r\n\r\nexport interface IWebsocketContext {\r\n  status: \"Connected\" | \"Not Connected\" | \"Connecting\";\r\n  socket: Socket<ServerToClientEvents, ClientToServerEvents> | undefined;\r\n}\r\n\r\nconst initialState: IWebsocketContext = {\r\n  status: \"Not Connected\",\r\n  socket: undefined,\r\n};\r\n\r\nconst WebsocketContext = createContext<IWebsocketContext>(initialState);\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nfunction WebSocketProvider({ children }: Props) {\r\n  // create context state, no need to store in redux\r\n  const [websocketState, setWebsocketState] =\r\n    useState<IWebsocketContext>(initialState);\r\n  // debugger;\r\n\r\n  useEffect(() => {\r\n    // if socket has not yet been defined, define and connect.  Websocket will reconnect as automatically.\r\n    if (websocketState.socket === undefined) {\r\n      const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io(\r\n        \"http://localhost:3001\"\r\n      );\r\n\r\n      // set up listeners here\r\n      // connected\r\n      socket.on(\"connect\", () => {\r\n        console.log(`Connected to websocket with id: ${socket.id}`);\r\n        setWebsocketState({ ...websocketState, status: \"Connected\" });\r\n      });\r\n\r\n      setWebsocketState({ ...websocketState, status: \"Connecting\", socket });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <WebsocketContext.Provider value={websocketState}>\r\n      {children}\r\n    </WebsocketContext.Provider>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  websocketStatus: state.websocketStatus.status,\r\n});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ninterface Props extends PropsFromRedux {}\r\n\r\nconst wrappedProvider = connector(WebSocketProvider);\r\n\r\nexport { wrappedProvider as WebsocketContextProvider, WebsocketContext };\r\n"]},"metadata":{},"sourceType":"module"}