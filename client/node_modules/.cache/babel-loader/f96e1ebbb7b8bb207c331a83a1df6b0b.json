{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\brew\\\\BrewPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { BreweryPanels } from \"./BreweryPanels\";\nimport { BrewerySwitchBar } from \"./BrewerySwitchBar\";\nimport { connect } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { loadBrewControllers } from \"../../redux/actions/brewComponentActions\";\nimport Spinner from \"../common/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BrewPage = props => {\n  _s();\n\n  const [brewControllers, setBrewControllers] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    brewerySettings,\n    loadBrewControllers\n  } = props; // should have props for current state of the brewery\n  // if websocket is controlled via a context, the context should be injected here and an additional wrapper may/likely will be required\n  // just leave websockets running when navigation to other pages for now at least\n\n  useEffect(() => {\n    if (props.brewControllers === \"Not Loaded\") {\n      setIsLoaded(false);\n      loadBrewControllers();\n    } else {\n      setBrewControllers(props.brewControllers);\n      setIsLoaded(true);\n    }\n  }, [props.brewControllers]);\n  useEffect(() => {\n    console.log(\"Update api call here ...\");\n  }, [brewControllers]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Brew!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BrewerySwitchBar, {\n      breweryStatus: brewerySettings.status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: isLoaded ? /*#__PURE__*/_jsxDEV(BreweryPanels, {\n        brewControllers: brewControllers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Loading ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(BrewPage, \"Q+u6AxdTA7ErZGRL95bX9KRb25c=\");\n\n_c = BrewPage;\n\nconst mapStateToProps = state => ({\n  brewControllers: state.brewControllerSlice.brewControllers,\n  brewerySettings: state.settingsSlice.settings,\n  loading: state.apiStatus.apiCallsInProgress > 0\n});\n\nconst mapDispatchToProps = {\n  loadBrewControllers\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(BrewPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BrewPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/brew/BrewPage.tsx"],"names":["BreweryPanels","BrewerySwitchBar","connect","useEffect","useState","loadBrewControllers","Spinner","BrewPage","props","brewControllers","setBrewControllers","isLoaded","setIsLoaded","brewerySettings","console","log","status","mapStateToProps","state","brewControllerSlice","settingsSlice","settings","loading","apiStatus","apiCallsInProgress","mapDispatchToProps","connector"],"mappings":";;;AACA,SAASA,aAAT,QAA8B,iBAA9B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,OAAOC,OAAP,MAAoB,mBAApB;;;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAkB;AAAA;;AACjC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAmB,EAAnB,CAAtD;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAU,KAAV,CAAxC;AACA,QAAM;AAAES,IAAAA,eAAF;AAAmBR,IAAAA;AAAnB,MACJG,KADF,CAHiC,CAMjC;AACA;AACA;;AAGAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,KAAK,CAACC,eAAN,KAA0B,YAA9B,EAA4C;AAC1CG,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAP,MAAAA,mBAAmB;AACpB,KAHD,MAIK;AACHK,MAAAA,kBAAkB,CAACF,KAAK,CAACC,eAAP,CAAlB;AACAG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,GATQ,EASN,CAACJ,KAAK,CAACC,eAAP,CATM,CAAT;AAWAN,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,GAFQ,EAEN,CAACN,eAAD,CAFM,CAAT;AAIA,sBACE;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,gBAAD;AAAkB,MAAA,aAAa,EAAEI,eAAe,CAACG;AAAjD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA,gBACGL,QAAQ,gBACP,QAAC,aAAD;AAAe,QAAA,eAAe,EAAEF;AAAhC;AAAA;AAAA;AAAA;AAAA,cADO,gBAGP;AAAA,gCACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAgBD,CA1CD;;GAAMF,Q;;KAAAA,Q;;AA4CN,MAAMU,eAAe,GAAIC,KAAD,KAAuB;AAC7CT,EAAAA,eAAe,EAAES,KAAK,CAACC,mBAAN,CAA0BV,eADE;AAE7CI,EAAAA,eAAe,EAAEK,KAAK,CAACE,aAAN,CAAoBC,QAFQ;AAG7CC,EAAAA,OAAO,EAAEJ,KAAK,CAACK,SAAN,CAAgBC,kBAAhB,GAAqC;AAHD,CAAvB,CAAxB;;AAMA,MAAMC,kBAAkB,GAAG;AACzBpB,EAAAA;AADyB,CAA3B;AAIA,MAAMqB,SAAS,GAAGxB,OAAO,CAACe,eAAD,EAAkBQ,kBAAlB,CAAzB;AAMA,qBAAeC,SAAS,CAACnB,QAAD,CAAxB","sourcesContent":["import { RootState } from \"../../redux/store\";\r\nimport { BreweryPanels } from \"./BreweryPanels\";\r\nimport { BrewerySwitchBar } from \"./BrewerySwitchBar\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { loadBrewControllers } from \"../../redux/actions/brewComponentActions\";\r\nimport Spinner from \"../common/Spinner\";\r\nimport { BrewController } from \"../../models/controller.model\";\r\n\r\nconst BrewPage = (props: Props) => {\r\n  const [brewControllers, setBrewControllers] = useState<BrewController[]>([]);\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  const { brewerySettings, loadBrewControllers } =\r\n    props;\r\n\r\n  // should have props for current state of the brewery\r\n  // if websocket is controlled via a context, the context should be injected here and an additional wrapper may/likely will be required\r\n  // just leave websockets running when navigation to other pages for now at least\r\n\r\n\r\n  useEffect(() => {\r\n    if (props.brewControllers === \"Not Loaded\") {\r\n      setIsLoaded(false);\r\n      loadBrewControllers();\r\n    }\r\n    else {\r\n      setBrewControllers(props.brewControllers);\r\n      setIsLoaded(true);\r\n    }\r\n  }, [props.brewControllers]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Update api call here ...\");\r\n  }, [brewControllers]);\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"text-center\">Brew!</h1>\r\n      <BrewerySwitchBar breweryStatus={brewerySettings.status} />\r\n      <div className=\"d-flex justify-content-center\">\r\n        {isLoaded ? (\r\n          <BreweryPanels brewControllers={brewControllers} />\r\n        ) : (\r\n          <div>\r\n            <Spinner />\r\n            <h2>Loading ...</h2>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  brewControllers: state.brewControllerSlice.brewControllers,\r\n  brewerySettings: state.settingsSlice.settings,\r\n  loading: state.apiStatus.apiCallsInProgress > 0,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  loadBrewControllers,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ninterface Props extends PropsFromRedux { }\r\n\r\nexport default connector(BrewPage);\r\n"]},"metadata":{},"sourceType":"module"}