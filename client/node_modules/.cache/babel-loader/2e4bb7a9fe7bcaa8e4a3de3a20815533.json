{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\configure\\\\ConfigPage.tsx\",\n    _s = $RefreshSig$();\n\n// import { stat } from \"fs\";\nimport { useContext, useEffect, useState } from \"react\";\n// import Spinner from \"../common/Spinner\";\nimport { WebSocketContext } from \"../../context/websocketContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testInitialControllers = [{\n  id: \"test\",\n  name: \"name\",\n  description: \"This is a test controller\",\n  sensorAddress: \"12345\",\n  heaterPin: 3\n}];\nexport const ConfigPage = function () {\n  _s();\n\n  const [brewControllers, setBrewControllers] = useState(testInitialControllers);\n  const {\n    socket,\n    status\n  } = useContext(WebSocketContext);\n  useEffect(() => {\n    if (socket !== undefined && status === \"Connected\") {\n      socket.emit(\"controller:list\", res => {\n        if (\"error\" in res) {\n          console.log(res.error);\n        } else {\n          console.log(\"Setting data first is \" + res.data[0].name);\n          setBrewControllers(res.data);\n        }\n      });\n    }\n  }, [socket, status]);\n  useEffect(() => {\n    console.log(\"first is \" + brewControllers[0].name);\n  }, [brewControllers]);\n\n  const RenderedComponents = _ref => {\n    let {\n      controllers\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: controllers ? controllers.map(controller => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Name: \", controller.name]\n      }, controller.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"No controllers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this);\n  };\n\n  function handleClick() {\n    //\n    if (socket !== undefined && status === \"Connected\") {\n      console.log(\"trying to update with \" + brewControllers.length);\n      socket.emit(\"controller:update\", brewControllers, res => {\n        console.log(res);\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"This is the config page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RenderedComponents, {\n      controllers: brewControllers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConfigPage, \"geHL65mxoeeahjW4olpXXgTMEY0=\");\n\n_c = ConfigPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigPage\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/configure/ConfigPage.tsx"],"names":["useContext","useEffect","useState","WebSocketContext","testInitialControllers","id","name","description","sensorAddress","heaterPin","ConfigPage","brewControllers","setBrewControllers","socket","status","undefined","emit","res","console","log","error","data","RenderedComponents","controllers","map","controller","handleClick","length"],"mappings":";;;AAAA;AACA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AAEA;AACA,SAASC,gBAAT,QAAiC,gCAAjC;;AAEA,MAAMC,sBAAwC,GAAG,CAC/C;AACEC,EAAAA,EAAE,EAAE,MADN;AAEEC,EAAAA,IAAI,EAAE,MAFR;AAGEC,EAAAA,WAAW,EAAE,2BAHf;AAIEC,EAAAA,aAAa,EAAE,OAJjB;AAKEC,EAAAA,SAAS,EAAE;AALb,CAD+C,CAAjD;AAUA,OAAO,MAAMC,UAAU,GAAG,YAAY;AAAA;;AACpC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CACpDE,sBADoD,CAAtD;AAGA,QAAM;AAAES,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBd,UAAU,CAACG,gBAAD,CAArC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,MAAM,KAAKE,SAAX,IAAwBD,MAAM,KAAK,WAAvC,EAAoD;AAClDD,MAAAA,MAAM,CAACG,IAAP,CAAY,iBAAZ,EAAgCC,GAAD,IAAS;AACtC,YAAI,WAAWA,GAAf,EAAoB;AAClBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,KAAhB;AACD,SAFD,MAEO;AACLF,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BF,GAAG,CAACI,IAAJ,CAAS,CAAT,EAAYf,IAAnD;AACAM,UAAAA,kBAAkB,CAACK,GAAG,CAACI,IAAL,CAAlB;AACD;AACF,OAPD;AAQD;AACF,GAXQ,EAWN,CAACR,MAAD,EAASC,MAAT,CAXM,CAAT;AAaAb,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcR,eAAe,CAAC,CAAD,CAAf,CAAmBL,IAA7C;AACD,GAFQ,EAEN,CAACK,eAAD,CAFM,CAAT;;AAQA,QAAMW,kBAAkB,GAAG;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,wBACzB;AAAA,gBACGA,WAAW,GACVA,WAAW,CAACC,GAAZ,CAAiBC,UAAD,iBACd;AAAA,6BAAkCA,UAAU,CAACnB,IAA7C;AAAA,SAAUmB,UAAU,CAACnB,IAArB;AAAA;AAAA;AAAA;AAAA,cADF,CADU,gBAKV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,YADyB;AAAA,GAA3B;;AAYA,WAASoB,WAAT,GAAuB;AACrB;AACA,QAAIb,MAAM,KAAKE,SAAX,IAAwBD,MAAM,KAAK,WAAvC,EAAoD;AAClDI,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BR,eAAe,CAACgB,MAAvD;AACAd,MAAAA,MAAM,CAACG,IAAP,CAAY,mBAAZ,EAAiCL,eAAjC,EAAmDM,GAAD,IAAS;AACzDC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAFD;AAGD;AACF;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAES,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,kBAAD;AAAoB,MAAA,WAAW,EAAEf;AAAjC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAhEM;;GAAMD,U;;KAAAA,U","sourcesContent":["// import { stat } from \"fs\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { BrewController } from \"../../../../server/lib/models/controllerModels\";\r\n// import Spinner from \"../common/Spinner\";\r\nimport { WebSocketContext } from \"../../context/websocketContext\";\r\n\r\nconst testInitialControllers: BrewController[] = [\r\n  {\r\n    id: \"test\",\r\n    name: \"name\",\r\n    description: \"This is a test controller\",\r\n    sensorAddress: \"12345\",\r\n    heaterPin: 3,\r\n  },\r\n];\r\n\r\nexport const ConfigPage = function () {\r\n  const [brewControllers, setBrewControllers] = useState<BrewController[]>(\r\n    testInitialControllers\r\n  );\r\n  const { socket, status } = useContext(WebSocketContext);\r\n\r\n  useEffect(() => {\r\n    if (socket !== undefined && status === \"Connected\") {\r\n      socket.emit(\"controller:list\", (res) => {\r\n        if (\"error\" in res) {\r\n          console.log(res.error);\r\n        } else {\r\n          console.log(\"Setting data first is \" + res.data[0].name);\r\n          setBrewControllers(res.data);\r\n        }\r\n      });\r\n    }\r\n  }, [socket, status]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"first is \" + brewControllers[0].name);\r\n  }, [brewControllers]);\r\n\r\n  interface Props {\r\n    controllers: BrewController[];\r\n  }\r\n\r\n  const RenderedComponents = ({ controllers }: Props) => (\r\n    <div>\r\n      {controllers ? (\r\n        controllers.map((controller) => (\r\n          <div key={controller.name}>Name: {controller.name}</div>\r\n        ))\r\n      ) : (\r\n        <h3>No controllers</h3>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  function handleClick() {\r\n    //\r\n    if (socket !== undefined && status === \"Connected\") {\r\n      console.log(\"trying to update with \" + brewControllers.length);\r\n      socket.emit(\"controller:update\", brewControllers, (res) => {\r\n        console.log(res);\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>This is the config page.</div>\r\n      <button onClick={handleClick}>Test</button>\r\n      <RenderedComponents controllers={brewControllers} />\r\n      {/* <form>\r\n        <input\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          value={state.component.componentName}\r\n        />\r\n        <input type=\"submit\" value=\"Save\" />\r\n      </form> */}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}