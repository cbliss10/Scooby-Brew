{"ast":null,"code":"// import { createContext, ReactNode, useEffect, useState } from \"react\";\n// import { connect, ConnectedProps } from \"react-redux\";\n// import { io, Socket } from \"socket.io-client\";\n// import { RootState } from \"../redux/store\";\n// import {\n//   ClientToServerEvents,\n//   ServerToClientEvents,\n// } from \"../../../server/lib/events\";\n// import { BrewController } from \"../../../server/lib/models/controllerModels\";\n// export interface IWebsocketContext {\n//   status: \"Connected\" | \"Not Connected\" | \"Connecting\";\n//   controllers: BrewController[];\n//   getControllers: () => void;\n// }\n// const initialState: IWebsocketContext = {\n//   status: \"Not Connected\",\n//   controllers: [],\n//   getControllers: () => {\n//   }\n// };\n// const WebsocketContext = createContext<IWebsocketContext>(initialState);\n// interface Props {\n//   children: ReactNode;\n// }\n// function WebSocketProvider({ children }: Props) {\n//   // create context state, no need to store in redux\n//   const [websocketState, setWebsocketState] =\n//     useState<IWebsocketContext>(initialState);\n//   // debugger;\n//   useEffect(() => {\n//     // if socket has not yet been defined, define and connect.  Websocket will reconnect as automatically.\n//     if (websocketState.socket === undefined) {\n//       const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io(\n//         \"http://localhost:3001\"\n//       );\n//       // set up listeners here\n//       // connected\n//       socket.on(\"connect\", () => {\n//         console.log(`Connected to websocket with id: ${socket.id}`);\n//         setWebsocketState({ ...websocketState, status: \"Connected\" });\n//       });\n//       setWebsocketState({ ...websocketState, status: \"Connecting\", socket });\n//     }\n//   }, []);\n//   return (\n//     <WebsocketContext.Provider value={websocketState}>\n//       {children}\n//     </WebsocketContext.Provider>\n//   );\n// }\n// const mapStateToProps = (state: RootState) => ({\n//   websocketStatus: state.websocketStatus.status,\n// });\n// const mapDispatchToProps = {};\n// const connector = connect(mapStateToProps, mapDispatchToProps);\n// type PropsFromRedux = ConnectedProps<typeof connector>;\n// interface Props extends PropsFromRedux {}\n// const wrappedProvider = connector(WebSocketProvider);\n// export { wrappedProvider as WebsocketContextProvider, WebsocketContext };","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/context/WebsocketContext.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA","sourcesContent":["// import { createContext, ReactNode, useEffect, useState } from \"react\";\r\n// import { connect, ConnectedProps } from \"react-redux\";\r\n// import { io, Socket } from \"socket.io-client\";\r\n// import { RootState } from \"../redux/store\";\r\n// import {\r\n//   ClientToServerEvents,\r\n//   ServerToClientEvents,\r\n// } from \"../../../server/lib/events\";\r\n// import { BrewController } from \"../../../server/lib/models/controllerModels\";\r\n\r\n// export interface IWebsocketContext {\r\n//   status: \"Connected\" | \"Not Connected\" | \"Connecting\";\r\n//   controllers: BrewController[];\r\n//   getControllers: () => void;\r\n// }\r\n\r\n// const initialState: IWebsocketContext = {\r\n//   status: \"Not Connected\",\r\n//   controllers: [],\r\n//   getControllers: () => {\r\n\r\n//   }\r\n// };\r\n\r\n// const WebsocketContext = createContext<IWebsocketContext>(initialState);\r\n\r\n// interface Props {\r\n//   children: ReactNode;\r\n// }\r\n\r\n// function WebSocketProvider({ children }: Props) {\r\n//   // create context state, no need to store in redux\r\n//   const [websocketState, setWebsocketState] =\r\n//     useState<IWebsocketContext>(initialState);\r\n//   // debugger;\r\n\r\n//   useEffect(() => {\r\n//     // if socket has not yet been defined, define and connect.  Websocket will reconnect as automatically.\r\n//     if (websocketState.socket === undefined) {\r\n//       const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io(\r\n//         \"http://localhost:3001\"\r\n//       );\r\n\r\n//       // set up listeners here\r\n//       // connected\r\n//       socket.on(\"connect\", () => {\r\n//         console.log(`Connected to websocket with id: ${socket.id}`);\r\n//         setWebsocketState({ ...websocketState, status: \"Connected\" });\r\n//       });\r\n\r\n//       setWebsocketState({ ...websocketState, status: \"Connecting\", socket });\r\n//     }\r\n//   }, []);\r\n\r\n//   return (\r\n//     <WebsocketContext.Provider value={websocketState}>\r\n//       {children}\r\n//     </WebsocketContext.Provider>\r\n//   );\r\n// }\r\n\r\n// const mapStateToProps = (state: RootState) => ({\r\n//   websocketStatus: state.websocketStatus.status,\r\n// });\r\n\r\n// const mapDispatchToProps = {};\r\n\r\n// const connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\n// type PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\n// interface Props extends PropsFromRedux {}\r\n\r\n// const wrappedProvider = connector(WebSocketProvider);\r\n\r\n// export { wrappedProvider as WebsocketContextProvider, WebsocketContext };\r\n"]},"metadata":{},"sourceType":"module"}