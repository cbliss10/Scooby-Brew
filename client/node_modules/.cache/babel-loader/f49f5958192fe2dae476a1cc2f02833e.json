{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\brew\\\\BrewPanel.tsx\";\nimport { PowerLevelComponent } from \"./HeatControl\";\nimport { TemperatureDisplay } from \"./TempDisplay\";\nimport { connect } from \"react-redux\";\nimport { updateBrewController } from \"../../redux/actions/brewComponentActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BrewPanel(props) {\n  const {\n    controller,\n    updateBrewController\n  } = props;\n  const {\n    units\n  } = props.brewerySettings;\n\n  const adjustPowerLevel = adjustment => {\n    const controllerCopy = { ...controller\n    };\n    const {\n      powerLevel\n    } = controllerCopy;\n    if (powerLevel === \"NA\") return;\n    let newPowerLevel = powerLevel + adjustment;\n\n    if (newPowerLevel < 1) {\n      newPowerLevel = 0;\n    }\n\n    if (newPowerLevel > 99) {\n      newPowerLevel = 100;\n    }\n\n    controllerCopy.powerLevel = newPowerLevel;\n    updateBrewController(controllerCopy);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-inline-flex flex-column p-2 border \",\n    children: [/*#__PURE__*/_jsxDEV(TemperatureDisplay, {\n      temperature: controller.temperature,\n      units: units\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PowerLevelComponent, {\n      powerLevel: controller.powerLevel,\n      adjustPowerLevel: adjustPowerLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_c = BrewPanel;\n\nconst mapStateToProps = state => ({\n  brewerySettings: state.settingsSlice.settings\n});\n\nconst mapDispatchToProps = {\n  updateBrewController\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(BrewPanel);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BrewPanel\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/brew/BrewPanel.tsx"],"names":["PowerLevelComponent","TemperatureDisplay","connect","updateBrewController","BrewPanel","props","controller","units","brewerySettings","adjustPowerLevel","adjustment","controllerCopy","powerLevel","newPowerLevel","temperature","mapStateToProps","state","settingsSlice","settings","mapDispatchToProps","connector"],"mappings":";AAAA,SAASA,mBAAT,QAAoC,eAApC;AACA,SAASC,kBAAT,QAAmC,eAAnC;AAEA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,oBAAT,QAAqC,0CAArC;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAAiC;AAC/B,QAAM;AAAEC,IAAAA,UAAF;AAAcH,IAAAA;AAAd,MAAuCE,KAA7C;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAYF,KAAK,CAACG,eAAxB;;AAEA,QAAMC,gBAAgB,GAAIC,UAAD,IAAwB;AAC/C,UAAMC,cAAc,GAAG,EAAE,GAAGL;AAAL,KAAvB;AACA,UAAM;AAAEM,MAAAA;AAAF,QAAiBD,cAAvB;AACA,QAAIC,UAAU,KAAK,IAAnB,EAAyB;AAEzB,QAAIC,aAAa,GAAGD,UAAU,GAAGF,UAAjC;;AAEA,QAAIG,aAAa,GAAG,CAApB,EAAuB;AACrBA,MAAAA,aAAa,GAAG,CAAhB;AACD;;AACD,QAAIA,aAAa,GAAG,EAApB,EAAwB;AACtBA,MAAAA,aAAa,GAAG,GAAhB;AACD;;AACDF,IAAAA,cAAc,CAACC,UAAf,GAA4BC,aAA5B;AACAV,IAAAA,oBAAoB,CAACQ,cAAD,CAApB;AACD,GAfD;;AAiBA,sBACE;AAAK,IAAA,SAAS,EAAC,uCAAf;AAAA,4BACE,QAAC,kBAAD;AAAoB,MAAA,WAAW,EAAEL,UAAU,CAACQ,WAA5C;AAAyD,MAAA,KAAK,EAAEP;AAAhE;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,mBAAD;AACE,MAAA,UAAU,EAAED,UAAU,CAACM,UADzB;AAEE,MAAA,gBAAgB,EAAEH;AAFpB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;KA9BQL,S;;AAgCT,MAAMW,eAAe,GAAIC,KAAD,KAAuB;AAC7CR,EAAAA,eAAe,EAAEQ,KAAK,CAACC,aAAN,CAAoBC;AADQ,CAAvB,CAAxB;;AAIA,MAAMC,kBAAkB,GAAG;AACzBhB,EAAAA;AADyB,CAA3B;AAIA,MAAMiB,SAAS,GAAGlB,OAAO,CAACa,eAAD,EAAkBI,kBAAlB,CAAzB;AAQA,qBAAeC,SAAS,CAAChB,SAAD,CAAxB","sourcesContent":["import { PowerLevelComponent } from \"./HeatControl\";\r\nimport { TemperatureDisplay } from \"./TempDisplay\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { updateBrewController } from \"../../redux/actions/brewComponentActions\";\r\nimport { BrewController } from \"../../models/controller.model\";\r\n\r\nfunction BrewPanel(props: Props) {\r\n  const { controller, updateBrewController } = props;\r\n  const { units } = props.brewerySettings;\r\n\r\n  const adjustPowerLevel = (adjustment: number) => {\r\n    const controllerCopy = { ...controller };\r\n    const { powerLevel } = controllerCopy;\r\n    if (powerLevel === \"NA\") return;\r\n\r\n    let newPowerLevel = powerLevel + adjustment;\r\n\r\n    if (newPowerLevel < 1) {\r\n      newPowerLevel = 0;\r\n    }\r\n    if (newPowerLevel > 99) {\r\n      newPowerLevel = 100;\r\n    }\r\n    controllerCopy.powerLevel = newPowerLevel;\r\n    updateBrewController(controllerCopy);\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-inline-flex flex-column p-2 border \">\r\n      <TemperatureDisplay temperature={controller.temperature} units={units} />\r\n      <PowerLevelComponent\r\n        powerLevel={controller.powerLevel}\r\n        adjustPowerLevel={adjustPowerLevel}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  brewerySettings: state.settingsSlice.settings,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  updateBrewController,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ninterface Props extends PropsFromRedux {\r\n  controller: BrewController;\r\n}\r\n\r\nexport default connector(BrewPanel);\r\n"]},"metadata":{},"sourceType":"module"}