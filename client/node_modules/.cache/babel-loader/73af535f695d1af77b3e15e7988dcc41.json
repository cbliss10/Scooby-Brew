{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cblis\\\\OneDrive\\\\Documents\\\\Projects\\\\SBFE4\\\\client\\\\src\\\\components\\\\brew\\\\BrewPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { BreweryPanels } from \"./BreweryPanels\";\nimport { connect } from \"react-redux\";\nimport { useState } from \"react\";\nimport { loadBrewControllers } from \"../../redux/actions/brewComponentActions\";\nimport Spinner from \"../common/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BrewPage = props => {\n  _s();\n\n  const [brewControllerState, setBrewControllerState] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false); // const { brewerySettings, loadBrewControllers } = props;\n  // useEffect(() => {\n  //   if (socket !== undefined) {\n  //     socket.emit(\"brew:start\");\n  //     socket.on(\"brew:update\", (newState) => {\n  //       setBrewControllerState(newState);\n  //     });\n  //   }\n  // }, [socket]);\n  // should have props for current state of the brewery\n  // if websocket is controlled via a context, the context should be injected here and an additional wrapper may/likely will be required\n  // just leave websockets running when navigation to other pages for now at least\n  // useEffect(() => {\n  //   if (props.brewControllers === \"Not Loaded\") {\n  //     setIsLoaded(false);\n  //     loadBrewControllers();\n  //   } else {\n  //     setBrewControllers(props.brewControllers);\n  //     setIsLoaded(true);\n  //   }\n  // }, [props.brewControllers]);\n  // useEffect(() => {\n  //   console.log(\"Update api call here ...\");\n  // }, [brewControllers]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center\",\n      children: \"Brew!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center\",\n      children: isLoaded ? /*#__PURE__*/_jsxDEV(BreweryPanels, {\n        brewControllerState: brewControllerState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Loading ...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(BrewPage, \"aPjJzo6UkP5fA3lW+Yrbqy8BqTs=\");\n\n_c = BrewPage;\n\nconst mapStateToProps = state => ({\n  brewControllers: state.brewControllerSlice.brewControllers,\n  brewerySettings: state.settingsSlice.settings,\n  loading: state.apiStatus.apiCallsInProgress > 0\n});\n\nconst mapDispatchToProps = {\n  loadBrewControllers\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default _c2 = connector(BrewPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BrewPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/cblis/OneDrive/Documents/Projects/SBFE4/client/src/components/brew/BrewPage.tsx"],"names":["BreweryPanels","connect","useState","loadBrewControllers","Spinner","BrewPage","props","brewControllerState","setBrewControllerState","isLoaded","setIsLoaded","mapStateToProps","state","brewControllers","brewControllerSlice","brewerySettings","settingsSlice","settings","loading","apiStatus","apiCallsInProgress","mapDispatchToProps","connector"],"mappings":";;;AACA,SAASA,aAAT,QAA8B,iBAA9B;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,OAAOC,OAAP,MAAoB,mBAApB;;;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAkB;AAAA;;AACjC,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDN,QAAQ,CAE5D,EAF4D,CAA9D;AAGA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAU,KAAV,CAAxC,CAJiC,CAKjC;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,sBACE;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAAA,gBACGO,QAAQ,gBACP,QAAC,aAAD;AAAe,QAAA,mBAAmB,EAAEF;AAApC;AAAA;AAAA;AAAA;AAAA,cADO,gBAGP;AAAA,gCACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAgBD,CAnDD;;GAAMF,Q;;KAAAA,Q;;AAqDN,MAAMM,eAAe,GAAIC,KAAD,KAAuB;AAC7CC,EAAAA,eAAe,EAAED,KAAK,CAACE,mBAAN,CAA0BD,eADE;AAE7CE,EAAAA,eAAe,EAAEH,KAAK,CAACI,aAAN,CAAoBC,QAFQ;AAG7CC,EAAAA,OAAO,EAAEN,KAAK,CAACO,SAAN,CAAgBC,kBAAhB,GAAqC;AAHD,CAAvB,CAAxB;;AAMA,MAAMC,kBAAkB,GAAG;AACzBlB,EAAAA;AADyB,CAA3B;AAIA,MAAMmB,SAAS,GAAGrB,OAAO,CAACU,eAAD,EAAkBU,kBAAlB,CAAzB;AAMA,qBAAeC,SAAS,CAACjB,QAAD,CAAxB","sourcesContent":["import { RootState } from \"../../redux/store\";\r\nimport { BreweryPanels } from \"./BreweryPanels\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { loadBrewControllers } from \"../../redux/actions/brewComponentActions\";\r\nimport Spinner from \"../common/Spinner\";\r\nimport { BrewControllerState } from \"../../../../server/lib/models/controllerModels\";\r\n\r\nconst BrewPage = (props: Props) => {\r\n  const [brewControllerState, setBrewControllerState] = useState<\r\n    BrewControllerState[]\r\n  >([]);\r\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\r\n  // const { brewerySettings, loadBrewControllers } = props;\r\n\r\n  // useEffect(() => {\r\n  //   if (socket !== undefined) {\r\n  //     socket.emit(\"brew:start\");\r\n\r\n  //     socket.on(\"brew:update\", (newState) => {\r\n  //       setBrewControllerState(newState);\r\n  //     });\r\n  //   }\r\n  // }, [socket]);\r\n\r\n  // should have props for current state of the brewery\r\n  // if websocket is controlled via a context, the context should be injected here and an additional wrapper may/likely will be required\r\n  // just leave websockets running when navigation to other pages for now at least\r\n\r\n  // useEffect(() => {\r\n  //   if (props.brewControllers === \"Not Loaded\") {\r\n  //     setIsLoaded(false);\r\n  //     loadBrewControllers();\r\n  //   } else {\r\n  //     setBrewControllers(props.brewControllers);\r\n  //     setIsLoaded(true);\r\n  //   }\r\n  // }, [props.brewControllers]);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"Update api call here ...\");\r\n  // }, [brewControllers]);\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"text-center\">Brew!</h1>\r\n      {/* <BrewerySwitchBar breweryStatus={brewerySettings.status} /> */}\r\n      <div className=\"d-flex justify-content-center\">\r\n        {isLoaded ? (\r\n          <BreweryPanels brewControllerState={brewControllerState} />\r\n        ) : (\r\n          <div>\r\n            <Spinner />\r\n            <h2>Loading ...</h2>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n  brewControllers: state.brewControllerSlice.brewControllers,\r\n  brewerySettings: state.settingsSlice.settings,\r\n  loading: state.apiStatus.apiCallsInProgress > 0,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  loadBrewControllers,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ninterface Props extends PropsFromRedux {}\r\n\r\nexport default connector(BrewPage);\r\n"]},"metadata":{},"sourceType":"module"}